
task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001dcc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08001f5c  08001f5c  00002f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002044  08002044  0000406c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002044  08002044  00003044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800204c  0800204c  0000406c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800204c  0800204c  0000304c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002050  08002050  00003050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08002054  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000406c  2**0
                  CONTENTS
 10 .bss          0000017c  2000006c  2000006c  0000406c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001e8  200001e8  0000406c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000406c  2**0
                  CONTENTS, READONLY
 13 .comment      00000026  00000000  00000000  0000409c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010708  00000000  00000000  000040c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003f2a  00000000  00000000  000147ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000578  00000000  00000000  000186f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000033a  00000000  00000000  00018c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002c41  00000000  00000000  00018faa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00005b71  00000000  00000000  0001bbeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000aac1  00000000  00000000  0002175c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000d58  00000000  00000000  0002c220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000012a  00000000  00000000  0002cf78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loclists 0000286e  00000000  00000000  0002d0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <deregister_tm_clones>:
 8000190:	4803      	ldr	r0, [pc, #12]	@ (80001a0 <deregister_tm_clones+0x10>)
 8000192:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <deregister_tm_clones+0x14>)
 8000194:	4283      	cmp	r3, r0
 8000196:	d002      	beq.n	800019e <deregister_tm_clones+0xe>
 8000198:	4b03      	ldr	r3, [pc, #12]	@ (80001a8 <deregister_tm_clones+0x18>)
 800019a:	b103      	cbz	r3, 800019e <deregister_tm_clones+0xe>
 800019c:	4718      	bx	r3
 800019e:	4770      	bx	lr
 80001a0:	2000006c 	.word	0x2000006c
 80001a4:	2000006c 	.word	0x2000006c
 80001a8:	00000000 	.word	0x00000000

080001ac <register_tm_clones>:
 80001ac:	4805      	ldr	r0, [pc, #20]	@ (80001c4 <register_tm_clones+0x18>)
 80001ae:	4b06      	ldr	r3, [pc, #24]	@ (80001c8 <register_tm_clones+0x1c>)
 80001b0:	1a1b      	subs	r3, r3, r0
 80001b2:	0fd9      	lsrs	r1, r3, #31
 80001b4:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001b8:	1049      	asrs	r1, r1, #1
 80001ba:	d002      	beq.n	80001c2 <register_tm_clones+0x16>
 80001bc:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <register_tm_clones+0x20>)
 80001be:	b103      	cbz	r3, 80001c2 <register_tm_clones+0x16>
 80001c0:	4718      	bx	r3
 80001c2:	4770      	bx	lr
 80001c4:	2000006c 	.word	0x2000006c
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c06      	ldr	r4, [pc, #24]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b943      	cbnz	r3, 80001ea <__do_global_dtors_aux+0x1a>
 80001d8:	f7ff ffda 	bl	8000190 <deregister_tm_clones>
 80001dc:	4b04      	ldr	r3, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	b113      	cbz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001e0:	4804      	ldr	r0, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x24>)
 80001e2:	f3af 8000 	nop.w
 80001e6:	2301      	movs	r3, #1
 80001e8:	7023      	strb	r3, [r4, #0]
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	2000006c 	.word	0x2000006c
 80001f0:	00000000 	.word	0x00000000
 80001f4:	08001f44 	.word	0x08001f44

080001f8 <frame_dummy>:
 80001f8:	b508      	push	{r3, lr}
 80001fa:	4b04      	ldr	r3, [pc, #16]	@ (800020c <frame_dummy+0x14>)
 80001fc:	b11b      	cbz	r3, 8000206 <frame_dummy+0xe>
 80001fe:	4904      	ldr	r1, [pc, #16]	@ (8000210 <frame_dummy+0x18>)
 8000200:	4804      	ldr	r0, [pc, #16]	@ (8000214 <frame_dummy+0x1c>)
 8000202:	f3af 8000 	nop.w
 8000206:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800020a:	e7cf      	b.n	80001ac <register_tm_clones>
 800020c:	00000000 	.word	0x00000000
 8000210:	20000070 	.word	0x20000070
 8000214:	08001f44 	.word	0x08001f44

08000218 <__libc_init_array>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	4b0f      	ldr	r3, [pc, #60]	@ (8000258 <__libc_init_array+0x40>)
 800021c:	4d0f      	ldr	r5, [pc, #60]	@ (800025c <__libc_init_array+0x44>)
 800021e:	42ab      	cmp	r3, r5
 8000220:	eba3 0605 	sub.w	r6, r3, r5
 8000224:	d007      	beq.n	8000236 <__libc_init_array+0x1e>
 8000226:	10b6      	asrs	r6, r6, #2
 8000228:	2400      	movs	r4, #0
 800022a:	f855 3b04 	ldr.w	r3, [r5], #4
 800022e:	3401      	adds	r4, #1
 8000230:	4798      	blx	r3
 8000232:	42a6      	cmp	r6, r4
 8000234:	d8f9      	bhi.n	800022a <__libc_init_array+0x12>
 8000236:	f001 fe85 	bl	8001f44 <_init>
 800023a:	4d09      	ldr	r5, [pc, #36]	@ (8000260 <__libc_init_array+0x48>)
 800023c:	4b09      	ldr	r3, [pc, #36]	@ (8000264 <__libc_init_array+0x4c>)
 800023e:	1b5e      	subs	r6, r3, r5
 8000240:	42ab      	cmp	r3, r5
 8000242:	ea4f 06a6 	mov.w	r6, r6, asr #2
 8000246:	d006      	beq.n	8000256 <__libc_init_array+0x3e>
 8000248:	2400      	movs	r4, #0
 800024a:	f855 3b04 	ldr.w	r3, [r5], #4
 800024e:	3401      	adds	r4, #1
 8000250:	4798      	blx	r3
 8000252:	42a6      	cmp	r6, r4
 8000254:	d8f9      	bhi.n	800024a <__libc_init_array+0x32>
 8000256:	bd70      	pop	{r4, r5, r6, pc}
 8000258:	0800204c 	.word	0x0800204c
 800025c:	0800204c 	.word	0x0800204c
 8000260:	0800204c 	.word	0x0800204c
 8000264:	08002050 	.word	0x08002050

08000268 <_puts_r>:
 8000268:	6a03      	ldr	r3, [r0, #32]
 800026a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800026e:	6884      	ldr	r4, [r0, #8]
 8000270:	4680      	mov	r8, r0
 8000272:	460e      	mov	r6, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d03b      	beq.n	80002f0 <_puts_r+0x88>
 8000278:	89a3      	ldrh	r3, [r4, #12]
 800027a:	071b      	lsls	r3, r3, #28
 800027c:	d517      	bpl.n	80002ae <_puts_r+0x46>
 800027e:	6923      	ldr	r3, [r4, #16]
 8000280:	b1ab      	cbz	r3, 80002ae <_puts_r+0x46>
 8000282:	3e01      	subs	r6, #1
 8000284:	68a3      	ldr	r3, [r4, #8]
 8000286:	f816 5f01 	ldrb.w	r5, [r6, #1]!
 800028a:	3b01      	subs	r3, #1
 800028c:	60a3      	str	r3, [r4, #8]
 800028e:	b1ed      	cbz	r5, 80002cc <_puts_r+0x64>
 8000290:	2b00      	cmp	r3, #0
 8000292:	da07      	bge.n	80002a4 <_puts_r+0x3c>
 8000294:	69a7      	ldr	r7, [r4, #24]
 8000296:	429f      	cmp	r7, r3
 8000298:	4622      	mov	r2, r4
 800029a:	4629      	mov	r1, r5
 800029c:	4640      	mov	r0, r8
 800029e:	dc10      	bgt.n	80002c2 <_puts_r+0x5a>
 80002a0:	2d0a      	cmp	r5, #10
 80002a2:	d00e      	beq.n	80002c2 <_puts_r+0x5a>
 80002a4:	6823      	ldr	r3, [r4, #0]
 80002a6:	1c5a      	adds	r2, r3, #1
 80002a8:	6022      	str	r2, [r4, #0]
 80002aa:	701d      	strb	r5, [r3, #0]
 80002ac:	e7ea      	b.n	8000284 <_puts_r+0x1c>
 80002ae:	4621      	mov	r1, r4
 80002b0:	4640      	mov	r0, r8
 80002b2:	f000 fb8b 	bl	80009cc <__swsetup_r>
 80002b6:	2800      	cmp	r0, #0
 80002b8:	d0e3      	beq.n	8000282 <_puts_r+0x1a>
 80002ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80002be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80002c2:	f000 fe33 	bl	8000f2c <__swbuf_r>
 80002c6:	3001      	adds	r0, #1
 80002c8:	d1dc      	bne.n	8000284 <_puts_r+0x1c>
 80002ca:	e7f6      	b.n	80002ba <_puts_r+0x52>
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	da09      	bge.n	80002e4 <_puts_r+0x7c>
 80002d0:	4622      	mov	r2, r4
 80002d2:	210a      	movs	r1, #10
 80002d4:	4640      	mov	r0, r8
 80002d6:	f000 fe29 	bl	8000f2c <__swbuf_r>
 80002da:	3001      	adds	r0, #1
 80002dc:	d0ed      	beq.n	80002ba <_puts_r+0x52>
 80002de:	200a      	movs	r0, #10
 80002e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80002e4:	6823      	ldr	r3, [r4, #0]
 80002e6:	220a      	movs	r2, #10
 80002e8:	1c59      	adds	r1, r3, #1
 80002ea:	6021      	str	r1, [r4, #0]
 80002ec:	701a      	strb	r2, [r3, #0]
 80002ee:	e7f6      	b.n	80002de <_puts_r+0x76>
 80002f0:	f000 f8f4 	bl	80004dc <__sinit>
 80002f4:	e7c0      	b.n	8000278 <_puts_r+0x10>
 80002f6:	bf00      	nop

080002f8 <puts>:
 80002f8:	4b02      	ldr	r3, [pc, #8]	@ (8000304 <puts+0xc>)
 80002fa:	4601      	mov	r1, r0
 80002fc:	6818      	ldr	r0, [r3, #0]
 80002fe:	f7ff bfb3 	b.w	8000268 <_puts_r>
 8000302:	bf00      	nop
 8000304:	2000000c 	.word	0x2000000c

08000308 <__fp_lock>:
 8000308:	2000      	movs	r0, #0
 800030a:	4770      	bx	lr

0800030c <stdio_exit_handler>:
 800030c:	4a02      	ldr	r2, [pc, #8]	@ (8000318 <stdio_exit_handler+0xc>)
 800030e:	4903      	ldr	r1, [pc, #12]	@ (800031c <stdio_exit_handler+0x10>)
 8000310:	4803      	ldr	r0, [pc, #12]	@ (8000320 <stdio_exit_handler+0x14>)
 8000312:	f000 bb39 	b.w	8000988 <_fwalk_sglue>
 8000316:	bf00      	nop
 8000318:	20000000 	.word	0x20000000
 800031c:	080006f5 	.word	0x080006f5
 8000320:	20000010 	.word	0x20000010

08000324 <cleanup_stdio>:
 8000324:	4b0c      	ldr	r3, [pc, #48]	@ (8000358 <cleanup_stdio+0x34>)
 8000326:	6841      	ldr	r1, [r0, #4]
 8000328:	4299      	cmp	r1, r3
 800032a:	b510      	push	{r4, lr}
 800032c:	4604      	mov	r4, r0
 800032e:	d001      	beq.n	8000334 <cleanup_stdio+0x10>
 8000330:	f000 f9e0 	bl	80006f4 <_fflush_r>
 8000334:	68a1      	ldr	r1, [r4, #8]
 8000336:	4b09      	ldr	r3, [pc, #36]	@ (800035c <cleanup_stdio+0x38>)
 8000338:	4299      	cmp	r1, r3
 800033a:	d002      	beq.n	8000342 <cleanup_stdio+0x1e>
 800033c:	4620      	mov	r0, r4
 800033e:	f000 f9d9 	bl	80006f4 <_fflush_r>
 8000342:	68e1      	ldr	r1, [r4, #12]
 8000344:	4b06      	ldr	r3, [pc, #24]	@ (8000360 <cleanup_stdio+0x3c>)
 8000346:	4299      	cmp	r1, r3
 8000348:	d004      	beq.n	8000354 <cleanup_stdio+0x30>
 800034a:	4620      	mov	r0, r4
 800034c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000350:	f000 b9d0 	b.w	80006f4 <_fflush_r>
 8000354:	bd10      	pop	{r4, pc}
 8000356:	bf00      	nop
 8000358:	20000088 	.word	0x20000088
 800035c:	200000f0 	.word	0x200000f0
 8000360:	20000158 	.word	0x20000158

08000364 <__fp_unlock>:
 8000364:	2000      	movs	r0, #0
 8000366:	4770      	bx	lr

08000368 <global_stdio_init.part.0>:
 8000368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800036c:	4c2a      	ldr	r4, [pc, #168]	@ (8000418 <global_stdio_init.part.0+0xb0>)
 800036e:	492b      	ldr	r1, [pc, #172]	@ (800041c <global_stdio_init.part.0+0xb4>)
 8000370:	f8df 90bc 	ldr.w	r9, [pc, #188]	@ 8000430 <global_stdio_init.part.0+0xc8>
 8000374:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 8000434 <global_stdio_init.part.0+0xcc>
 8000378:	4f29      	ldr	r7, [pc, #164]	@ (8000420 <global_stdio_init.part.0+0xb8>)
 800037a:	f8c4 1138 	str.w	r1, [r4, #312]	@ 0x138
 800037e:	2500      	movs	r5, #0
 8000380:	2304      	movs	r3, #4
 8000382:	2208      	movs	r2, #8
 8000384:	4629      	mov	r1, r5
 8000386:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 800038a:	4e26      	ldr	r6, [pc, #152]	@ (8000424 <global_stdio_init.part.0+0xbc>)
 800038c:	60e3      	str	r3, [r4, #12]
 800038e:	e9c4 5500 	strd	r5, r5, [r4]
 8000392:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000396:	60a5      	str	r5, [r4, #8]
 8000398:	6665      	str	r5, [r4, #100]	@ 0x64
 800039a:	61a5      	str	r5, [r4, #24]
 800039c:	f000 f8c6 	bl	800052c <memset>
 80003a0:	4b21      	ldr	r3, [pc, #132]	@ (8000428 <global_stdio_init.part.0+0xc0>)
 80003a2:	6763      	str	r3, [r4, #116]	@ 0x74
 80003a4:	2208      	movs	r2, #8
 80003a6:	4629      	mov	r1, r5
 80003a8:	f104 00c4 	add.w	r0, r4, #196	@ 0xc4
 80003ac:	e9c4 4908 	strd	r4, r9, [r4, #32]
 80003b0:	e9c4 870a 	strd	r8, r7, [r4, #40]	@ 0x28
 80003b4:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
 80003b8:	e9c4 551e 	strd	r5, r5, [r4, #120]	@ 0x78
 80003bc:	6725      	str	r5, [r4, #112]	@ 0x70
 80003be:	f8c4 50cc 	str.w	r5, [r4, #204]	@ 0xcc
 80003c2:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
 80003c6:	6326      	str	r6, [r4, #48]	@ 0x30
 80003c8:	f000 f8b0 	bl	800052c <memset>
 80003cc:	4b17      	ldr	r3, [pc, #92]	@ (800042c <global_stdio_init.part.0+0xc4>)
 80003ce:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
 80003d2:	4629      	mov	r1, r5
 80003d4:	f104 0368 	add.w	r3, r4, #104	@ 0x68
 80003d8:	2208      	movs	r2, #8
 80003da:	f504 7096 	add.w	r0, r4, #300	@ 0x12c
 80003de:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
 80003e2:	e9c4 9823 	strd	r9, r8, [r4, #140]	@ 0x8c
 80003e6:	e9c4 7625 	strd	r7, r6, [r4, #148]	@ 0x94
 80003ea:	e9c4 5534 	strd	r5, r5, [r4, #208]	@ 0xd0
 80003ee:	e9c4 5538 	strd	r5, r5, [r4, #224]	@ 0xe0
 80003f2:	f8c4 50d8 	str.w	r5, [r4, #216]	@ 0xd8
 80003f6:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 80003fa:	f8c4 50e8 	str.w	r5, [r4, #232]	@ 0xe8
 80003fe:	f000 f895 	bl	800052c <memset>
 8000402:	f104 03d0 	add.w	r3, r4, #208	@ 0xd0
 8000406:	e9c4 983d 	strd	r9, r8, [r4, #244]	@ 0xf4
 800040a:	e9c4 763f 	strd	r7, r6, [r4, #252]	@ 0xfc
 800040e:	f8c4 30f0 	str.w	r3, [r4, #240]	@ 0xf0
 8000412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000416:	bf00      	nop
 8000418:	20000088 	.word	0x20000088
 800041c:	0800030d 	.word	0x0800030d
 8000420:	08001059 	.word	0x08001059
 8000424:	0800107d 	.word	0x0800107d
 8000428:	00010009 	.word	0x00010009
 800042c:	00020012 	.word	0x00020012
 8000430:	08000ff1 	.word	0x08000ff1
 8000434:	08001019 	.word	0x08001019

08000438 <__sfp>:
 8000438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043a:	4b25      	ldr	r3, [pc, #148]	@ (80004d0 <__sfp+0x98>)
 800043c:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000440:	4606      	mov	r6, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d03c      	beq.n	80004c0 <__sfp+0x88>
 8000446:	4f23      	ldr	r7, [pc, #140]	@ (80004d4 <__sfp+0x9c>)
 8000448:	e9d7 3401 	ldrd	r3, r4, [r7, #4]
 800044c:	3b01      	subs	r3, #1
 800044e:	d504      	bpl.n	800045a <__sfp+0x22>
 8000450:	e01d      	b.n	800048e <__sfp+0x56>
 8000452:	1c5a      	adds	r2, r3, #1
 8000454:	f104 0468 	add.w	r4, r4, #104	@ 0x68
 8000458:	d019      	beq.n	800048e <__sfp+0x56>
 800045a:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800045e:	3b01      	subs	r3, #1
 8000460:	2d00      	cmp	r5, #0
 8000462:	d1f6      	bne.n	8000452 <__sfp+0x1a>
 8000464:	4b1c      	ldr	r3, [pc, #112]	@ (80004d8 <__sfp+0xa0>)
 8000466:	60e3      	str	r3, [r4, #12]
 8000468:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800046c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000470:	6665      	str	r5, [r4, #100]	@ 0x64
 8000472:	6025      	str	r5, [r4, #0]
 8000474:	61a5      	str	r5, [r4, #24]
 8000476:	2208      	movs	r2, #8
 8000478:	4629      	mov	r1, r5
 800047a:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 800047e:	f000 f855 	bl	800052c <memset>
 8000482:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8000486:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
 800048a:	4620      	mov	r0, r4
 800048c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800048e:	683d      	ldr	r5, [r7, #0]
 8000490:	b10d      	cbz	r5, 8000496 <__sfp+0x5e>
 8000492:	462f      	mov	r7, r5
 8000494:	e7d8      	b.n	8000448 <__sfp+0x10>
 8000496:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 800049a:	4630      	mov	r0, r6
 800049c:	f000 f996 	bl	80007cc <_malloc_r>
 80004a0:	4604      	mov	r4, r0
 80004a2:	b180      	cbz	r0, 80004c6 <__sfp+0x8e>
 80004a4:	2304      	movs	r3, #4
 80004a6:	e9c0 5300 	strd	r5, r3, [r0]
 80004aa:	300c      	adds	r0, #12
 80004ac:	4629      	mov	r1, r5
 80004ae:	60a0      	str	r0, [r4, #8]
 80004b0:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 80004b4:	4625      	mov	r5, r4
 80004b6:	f000 f839 	bl	800052c <memset>
 80004ba:	603c      	str	r4, [r7, #0]
 80004bc:	462f      	mov	r7, r5
 80004be:	e7c3      	b.n	8000448 <__sfp+0x10>
 80004c0:	f7ff ff52 	bl	8000368 <global_stdio_init.part.0>
 80004c4:	e7bf      	b.n	8000446 <__sfp+0xe>
 80004c6:	230c      	movs	r3, #12
 80004c8:	6038      	str	r0, [r7, #0]
 80004ca:	6033      	str	r3, [r6, #0]
 80004cc:	e7dd      	b.n	800048a <__sfp+0x52>
 80004ce:	bf00      	nop
 80004d0:	20000088 	.word	0x20000088
 80004d4:	20000000 	.word	0x20000000
 80004d8:	ffff0001 	.word	0xffff0001

080004dc <__sinit>:
 80004dc:	6a03      	ldr	r3, [r0, #32]
 80004de:	b103      	cbz	r3, 80004e2 <__sinit+0x6>
 80004e0:	4770      	bx	lr
 80004e2:	4b04      	ldr	r3, [pc, #16]	@ (80004f4 <__sinit+0x18>)
 80004e4:	4a04      	ldr	r2, [pc, #16]	@ (80004f8 <__sinit+0x1c>)
 80004e6:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80004ea:	6202      	str	r2, [r0, #32]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d1f7      	bne.n	80004e0 <__sinit+0x4>
 80004f0:	e73a      	b.n	8000368 <global_stdio_init.part.0>
 80004f2:	bf00      	nop
 80004f4:	20000088 	.word	0x20000088
 80004f8:	08000325 	.word	0x08000325

080004fc <__sfp_lock_acquire>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <__sfp_lock_release>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <__fp_lock_all>:
 8000504:	4a02      	ldr	r2, [pc, #8]	@ (8000510 <__fp_lock_all+0xc>)
 8000506:	4903      	ldr	r1, [pc, #12]	@ (8000514 <__fp_lock_all+0x10>)
 8000508:	2000      	movs	r0, #0
 800050a:	f000 ba3d 	b.w	8000988 <_fwalk_sglue>
 800050e:	bf00      	nop
 8000510:	20000000 	.word	0x20000000
 8000514:	08000309 	.word	0x08000309

08000518 <__fp_unlock_all>:
 8000518:	4a02      	ldr	r2, [pc, #8]	@ (8000524 <__fp_unlock_all+0xc>)
 800051a:	4903      	ldr	r1, [pc, #12]	@ (8000528 <__fp_unlock_all+0x10>)
 800051c:	2000      	movs	r0, #0
 800051e:	f000 ba33 	b.w	8000988 <_fwalk_sglue>
 8000522:	bf00      	nop
 8000524:	20000000 	.word	0x20000000
 8000528:	08000365 	.word	0x08000365

0800052c <memset>:
 800052c:	0783      	lsls	r3, r0, #30
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	d047      	beq.n	80005c2 <memset+0x96>
 8000532:	1e54      	subs	r4, r2, #1
 8000534:	2a00      	cmp	r2, #0
 8000536:	d03e      	beq.n	80005b6 <memset+0x8a>
 8000538:	b2ca      	uxtb	r2, r1
 800053a:	4603      	mov	r3, r0
 800053c:	e001      	b.n	8000542 <memset+0x16>
 800053e:	3c01      	subs	r4, #1
 8000540:	d339      	bcc.n	80005b6 <memset+0x8a>
 8000542:	f803 2b01 	strb.w	r2, [r3], #1
 8000546:	079d      	lsls	r5, r3, #30
 8000548:	d1f9      	bne.n	800053e <memset+0x12>
 800054a:	2c03      	cmp	r4, #3
 800054c:	d92c      	bls.n	80005a8 <memset+0x7c>
 800054e:	b2cd      	uxtb	r5, r1
 8000550:	eb05 2505 	add.w	r5, r5, r5, lsl #8
 8000554:	2c0f      	cmp	r4, #15
 8000556:	eb05 4505 	add.w	r5, r5, r5, lsl #16
 800055a:	d935      	bls.n	80005c8 <memset+0x9c>
 800055c:	f1a4 0210 	sub.w	r2, r4, #16
 8000560:	f022 0c0f 	bic.w	ip, r2, #15
 8000564:	f103 0e10 	add.w	lr, r3, #16
 8000568:	44e6      	add	lr, ip
 800056a:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 800056e:	461a      	mov	r2, r3
 8000570:	e9c2 5500 	strd	r5, r5, [r2]
 8000574:	e9c2 5502 	strd	r5, r5, [r2, #8]
 8000578:	3210      	adds	r2, #16
 800057a:	4572      	cmp	r2, lr
 800057c:	d1f8      	bne.n	8000570 <memset+0x44>
 800057e:	f10c 0201 	add.w	r2, ip, #1
 8000582:	f014 0f0c 	tst.w	r4, #12
 8000586:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800058a:	f004 0c0f 	and.w	ip, r4, #15
 800058e:	d013      	beq.n	80005b8 <memset+0x8c>
 8000590:	f1ac 0304 	sub.w	r3, ip, #4
 8000594:	f023 0303 	bic.w	r3, r3, #3
 8000598:	3304      	adds	r3, #4
 800059a:	4413      	add	r3, r2
 800059c:	f842 5b04 	str.w	r5, [r2], #4
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d1fb      	bne.n	800059c <memset+0x70>
 80005a4:	f00c 0403 	and.w	r4, ip, #3
 80005a8:	b12c      	cbz	r4, 80005b6 <memset+0x8a>
 80005aa:	b2c9      	uxtb	r1, r1
 80005ac:	441c      	add	r4, r3
 80005ae:	f803 1b01 	strb.w	r1, [r3], #1
 80005b2:	42a3      	cmp	r3, r4
 80005b4:	d1fb      	bne.n	80005ae <memset+0x82>
 80005b6:	bd30      	pop	{r4, r5, pc}
 80005b8:	4664      	mov	r4, ip
 80005ba:	4613      	mov	r3, r2
 80005bc:	2c00      	cmp	r4, #0
 80005be:	d1f4      	bne.n	80005aa <memset+0x7e>
 80005c0:	e7f9      	b.n	80005b6 <memset+0x8a>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4614      	mov	r4, r2
 80005c6:	e7c0      	b.n	800054a <memset+0x1e>
 80005c8:	461a      	mov	r2, r3
 80005ca:	46a4      	mov	ip, r4
 80005cc:	e7e0      	b.n	8000590 <memset+0x64>
 80005ce:	bf00      	nop

080005d0 <__sflush_r>:
 80005d0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 80005d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80005d8:	071e      	lsls	r6, r3, #28
 80005da:	460c      	mov	r4, r1
 80005dc:	4680      	mov	r8, r0
 80005de:	d43d      	bmi.n	800065c <__sflush_r+0x8c>
 80005e0:	684a      	ldr	r2, [r1, #4]
 80005e2:	2a00      	cmp	r2, #0
 80005e4:	dd56      	ble.n	8000694 <__sflush_r+0xc4>
 80005e6:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 80005e8:	2d00      	cmp	r5, #0
 80005ea:	d034      	beq.n	8000656 <__sflush_r+0x86>
 80005ec:	2200      	movs	r2, #0
 80005ee:	f8d8 6000 	ldr.w	r6, [r8]
 80005f2:	f8c8 2000 	str.w	r2, [r8]
 80005f6:	f413 5280 	ands.w	r2, r3, #4096	@ 0x1000
 80005fa:	6a21      	ldr	r1, [r4, #32]
 80005fc:	d157      	bne.n	80006ae <__sflush_r+0xde>
 80005fe:	2301      	movs	r3, #1
 8000600:	4640      	mov	r0, r8
 8000602:	47a8      	blx	r5
 8000604:	1c45      	adds	r5, r0, #1
 8000606:	4602      	mov	r2, r0
 8000608:	d066      	beq.n	80006d8 <__sflush_r+0x108>
 800060a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800060e:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8000610:	6a21      	ldr	r1, [r4, #32]
 8000612:	0758      	lsls	r0, r3, #29
 8000614:	d505      	bpl.n	8000622 <__sflush_r+0x52>
 8000616:	6863      	ldr	r3, [r4, #4]
 8000618:	1ad2      	subs	r2, r2, r3
 800061a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800061c:	b10b      	cbz	r3, 8000622 <__sflush_r+0x52>
 800061e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000620:	1ad2      	subs	r2, r2, r3
 8000622:	2300      	movs	r3, #0
 8000624:	4640      	mov	r0, r8
 8000626:	47a8      	blx	r5
 8000628:	1c43      	adds	r3, r0, #1
 800062a:	d042      	beq.n	80006b2 <__sflush_r+0xe2>
 800062c:	2300      	movs	r3, #0
 800062e:	6063      	str	r3, [r4, #4]
 8000630:	6923      	ldr	r3, [r4, #16]
 8000632:	6023      	str	r3, [r4, #0]
 8000634:	89a3      	ldrh	r3, [r4, #12]
 8000636:	04df      	lsls	r7, r3, #19
 8000638:	d500      	bpl.n	800063c <__sflush_r+0x6c>
 800063a:	6560      	str	r0, [r4, #84]	@ 0x54
 800063c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800063e:	f8c8 6000 	str.w	r6, [r8]
 8000642:	b141      	cbz	r1, 8000656 <__sflush_r+0x86>
 8000644:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000648:	4299      	cmp	r1, r3
 800064a:	d002      	beq.n	8000652 <__sflush_r+0x82>
 800064c:	4640      	mov	r0, r8
 800064e:	f000 f93d 	bl	80008cc <_free_r>
 8000652:	2300      	movs	r3, #0
 8000654:	6363      	str	r3, [r4, #52]	@ 0x34
 8000656:	2000      	movs	r0, #0
 8000658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800065c:	690e      	ldr	r6, [r1, #16]
 800065e:	2e00      	cmp	r6, #0
 8000660:	d0f9      	beq.n	8000656 <__sflush_r+0x86>
 8000662:	079b      	lsls	r3, r3, #30
 8000664:	680d      	ldr	r5, [r1, #0]
 8000666:	bf08      	it	eq
 8000668:	694b      	ldreq	r3, [r1, #20]
 800066a:	600e      	str	r6, [r1, #0]
 800066c:	bf18      	it	ne
 800066e:	2300      	movne	r3, #0
 8000670:	1bad      	subs	r5, r5, r6
 8000672:	608b      	str	r3, [r1, #8]
 8000674:	e00b      	b.n	800068e <__sflush_r+0xbe>
 8000676:	462b      	mov	r3, r5
 8000678:	4632      	mov	r2, r6
 800067a:	6a21      	ldr	r1, [r4, #32]
 800067c:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 800067e:	4640      	mov	r0, r8
 8000680:	47b8      	blx	r7
 8000682:	f1b0 0c00 	subs.w	ip, r0, #0
 8000686:	eba5 050c 	sub.w	r5, r5, ip
 800068a:	4466      	add	r6, ip
 800068c:	dd06      	ble.n	800069c <__sflush_r+0xcc>
 800068e:	2d00      	cmp	r5, #0
 8000690:	dcf1      	bgt.n	8000676 <__sflush_r+0xa6>
 8000692:	e7e0      	b.n	8000656 <__sflush_r+0x86>
 8000694:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8000696:	2a00      	cmp	r2, #0
 8000698:	dca5      	bgt.n	80005e6 <__sflush_r+0x16>
 800069a:	e7dc      	b.n	8000656 <__sflush_r+0x86>
 800069c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80006a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006a4:	81a3      	strh	r3, [r4, #12]
 80006a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80006aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80006ae:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80006b0:	e7af      	b.n	8000612 <__sflush_r+0x42>
 80006b2:	f8d8 1000 	ldr.w	r1, [r8]
 80006b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80006ba:	291d      	cmp	r1, #29
 80006bc:	d8f0      	bhi.n	80006a0 <__sflush_r+0xd0>
 80006be:	4a0c      	ldr	r2, [pc, #48]	@ (80006f0 <__sflush_r+0x120>)
 80006c0:	40ca      	lsrs	r2, r1
 80006c2:	07d5      	lsls	r5, r2, #31
 80006c4:	d5ec      	bpl.n	80006a0 <__sflush_r+0xd0>
 80006c6:	6922      	ldr	r2, [r4, #16]
 80006c8:	6022      	str	r2, [r4, #0]
 80006ca:	2200      	movs	r2, #0
 80006cc:	6062      	str	r2, [r4, #4]
 80006ce:	04da      	lsls	r2, r3, #19
 80006d0:	d5b4      	bpl.n	800063c <__sflush_r+0x6c>
 80006d2:	2900      	cmp	r1, #0
 80006d4:	d0b1      	beq.n	800063a <__sflush_r+0x6a>
 80006d6:	e7b1      	b.n	800063c <__sflush_r+0x6c>
 80006d8:	f8d8 3000 	ldr.w	r3, [r8]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d094      	beq.n	800060a <__sflush_r+0x3a>
 80006e0:	2b1d      	cmp	r3, #29
 80006e2:	d001      	beq.n	80006e8 <__sflush_r+0x118>
 80006e4:	2b16      	cmp	r3, #22
 80006e6:	d1d9      	bne.n	800069c <__sflush_r+0xcc>
 80006e8:	f8c8 6000 	str.w	r6, [r8]
 80006ec:	e7b3      	b.n	8000656 <__sflush_r+0x86>
 80006ee:	bf00      	nop
 80006f0:	20400001 	.word	0x20400001

080006f4 <_fflush_r>:
 80006f4:	690b      	ldr	r3, [r1, #16]
 80006f6:	b1b3      	cbz	r3, 8000726 <_fflush_r+0x32>
 80006f8:	b510      	push	{r4, lr}
 80006fa:	4604      	mov	r4, r0
 80006fc:	b082      	sub	sp, #8
 80006fe:	b108      	cbz	r0, 8000704 <_fflush_r+0x10>
 8000700:	6a03      	ldr	r3, [r0, #32]
 8000702:	b15b      	cbz	r3, 800071c <_fflush_r+0x28>
 8000704:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8000708:	b913      	cbnz	r3, 8000710 <_fflush_r+0x1c>
 800070a:	2000      	movs	r0, #0
 800070c:	b002      	add	sp, #8
 800070e:	bd10      	pop	{r4, pc}
 8000710:	4620      	mov	r0, r4
 8000712:	b002      	add	sp, #8
 8000714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000718:	f7ff bf5a 	b.w	80005d0 <__sflush_r>
 800071c:	9101      	str	r1, [sp, #4]
 800071e:	f7ff fedd 	bl	80004dc <__sinit>
 8000722:	9901      	ldr	r1, [sp, #4]
 8000724:	e7ee      	b.n	8000704 <_fflush_r+0x10>
 8000726:	2000      	movs	r0, #0
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop

0800072c <fflush>:
 800072c:	b1b8      	cbz	r0, 800075e <fflush+0x32>
 800072e:	b538      	push	{r3, r4, r5, lr}
 8000730:	4a0d      	ldr	r2, [pc, #52]	@ (8000768 <fflush+0x3c>)
 8000732:	6903      	ldr	r3, [r0, #16]
 8000734:	6815      	ldr	r5, [r2, #0]
 8000736:	4604      	mov	r4, r0
 8000738:	b12b      	cbz	r3, 8000746 <fflush+0x1a>
 800073a:	b10d      	cbz	r5, 8000740 <fflush+0x14>
 800073c:	6a2b      	ldr	r3, [r5, #32]
 800073e:	b153      	cbz	r3, 8000756 <fflush+0x2a>
 8000740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000744:	b90b      	cbnz	r3, 800074a <fflush+0x1e>
 8000746:	2000      	movs	r0, #0
 8000748:	bd38      	pop	{r3, r4, r5, pc}
 800074a:	4621      	mov	r1, r4
 800074c:	4628      	mov	r0, r5
 800074e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000752:	f7ff bf3d 	b.w	80005d0 <__sflush_r>
 8000756:	4628      	mov	r0, r5
 8000758:	f7ff fec0 	bl	80004dc <__sinit>
 800075c:	e7f0      	b.n	8000740 <fflush+0x14>
 800075e:	4a03      	ldr	r2, [pc, #12]	@ (800076c <fflush+0x40>)
 8000760:	4903      	ldr	r1, [pc, #12]	@ (8000770 <fflush+0x44>)
 8000762:	4804      	ldr	r0, [pc, #16]	@ (8000774 <fflush+0x48>)
 8000764:	f000 b910 	b.w	8000988 <_fwalk_sglue>
 8000768:	2000000c 	.word	0x2000000c
 800076c:	20000000 	.word	0x20000000
 8000770:	080006f5 	.word	0x080006f5
 8000774:	20000010 	.word	0x20000010

08000778 <__errno>:
 8000778:	4b01      	ldr	r3, [pc, #4]	@ (8000780 <__errno+0x8>)
 800077a:	6818      	ldr	r0, [r3, #0]
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	2000000c 	.word	0x2000000c

08000784 <sbrk_aligned>:
 8000784:	b570      	push	{r4, r5, r6, lr}
 8000786:	4e10      	ldr	r6, [pc, #64]	@ (80007c8 <sbrk_aligned+0x44>)
 8000788:	6833      	ldr	r3, [r6, #0]
 800078a:	4605      	mov	r5, r0
 800078c:	460c      	mov	r4, r1
 800078e:	b1b3      	cbz	r3, 80007be <sbrk_aligned+0x3a>
 8000790:	4621      	mov	r1, r4
 8000792:	4628      	mov	r0, r5
 8000794:	f000 fc1a 	bl	8000fcc <_sbrk_r>
 8000798:	1c43      	adds	r3, r0, #1
 800079a:	d00c      	beq.n	80007b6 <sbrk_aligned+0x32>
 800079c:	1cc4      	adds	r4, r0, #3
 800079e:	f024 0403 	bic.w	r4, r4, #3
 80007a2:	42a0      	cmp	r0, r4
 80007a4:	d005      	beq.n	80007b2 <sbrk_aligned+0x2e>
 80007a6:	1a21      	subs	r1, r4, r0
 80007a8:	4628      	mov	r0, r5
 80007aa:	f000 fc0f 	bl	8000fcc <_sbrk_r>
 80007ae:	3001      	adds	r0, #1
 80007b0:	d001      	beq.n	80007b6 <sbrk_aligned+0x32>
 80007b2:	4620      	mov	r0, r4
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80007ba:	4620      	mov	r0, r4
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	4619      	mov	r1, r3
 80007c0:	f000 fc04 	bl	8000fcc <_sbrk_r>
 80007c4:	6030      	str	r0, [r6, #0]
 80007c6:	e7e3      	b.n	8000790 <sbrk_aligned+0xc>
 80007c8:	200001c4 	.word	0x200001c4

080007cc <_malloc_r>:
 80007cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007d0:	1ccd      	adds	r5, r1, #3
 80007d2:	f025 0503 	bic.w	r5, r5, #3
 80007d6:	3508      	adds	r5, #8
 80007d8:	2d0c      	cmp	r5, #12
 80007da:	bf38      	it	cc
 80007dc:	250c      	movcc	r5, #12
 80007de:	2d00      	cmp	r5, #0
 80007e0:	4606      	mov	r6, r0
 80007e2:	db18      	blt.n	8000816 <_malloc_r+0x4a>
 80007e4:	42a9      	cmp	r1, r5
 80007e6:	d816      	bhi.n	8000816 <_malloc_r+0x4a>
 80007e8:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 80008c8 <_malloc_r+0xfc>
 80007ec:	f000 f950 	bl	8000a90 <__malloc_lock>
 80007f0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80007f4:	b1a2      	cbz	r2, 8000820 <_malloc_r+0x54>
 80007f6:	4614      	mov	r4, r2
 80007f8:	e003      	b.n	8000802 <_malloc_r+0x36>
 80007fa:	6863      	ldr	r3, [r4, #4]
 80007fc:	4622      	mov	r2, r4
 80007fe:	b17b      	cbz	r3, 8000820 <_malloc_r+0x54>
 8000800:	461c      	mov	r4, r3
 8000802:	6823      	ldr	r3, [r4, #0]
 8000804:	1b5b      	subs	r3, r3, r5
 8000806:	d4f8      	bmi.n	80007fa <_malloc_r+0x2e>
 8000808:	2b0b      	cmp	r3, #11
 800080a:	d81f      	bhi.n	800084c <_malloc_r+0x80>
 800080c:	4294      	cmp	r4, r2
 800080e:	6863      	ldr	r3, [r4, #4]
 8000810:	d054      	beq.n	80008bc <_malloc_r+0xf0>
 8000812:	6053      	str	r3, [r2, #4]
 8000814:	e00c      	b.n	8000830 <_malloc_r+0x64>
 8000816:	230c      	movs	r3, #12
 8000818:	6033      	str	r3, [r6, #0]
 800081a:	2000      	movs	r0, #0
 800081c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000820:	4629      	mov	r1, r5
 8000822:	4630      	mov	r0, r6
 8000824:	f7ff ffae 	bl	8000784 <sbrk_aligned>
 8000828:	1c43      	adds	r3, r0, #1
 800082a:	4604      	mov	r4, r0
 800082c:	d019      	beq.n	8000862 <_malloc_r+0x96>
 800082e:	6005      	str	r5, [r0, #0]
 8000830:	4630      	mov	r0, r6
 8000832:	f000 f92f 	bl	8000a94 <__malloc_unlock>
 8000836:	f104 000b 	add.w	r0, r4, #11
 800083a:	1d23      	adds	r3, r4, #4
 800083c:	f020 0007 	bic.w	r0, r0, #7
 8000840:	1ac2      	subs	r2, r0, r3
 8000842:	bf1c      	itt	ne
 8000844:	1a1b      	subne	r3, r3, r0
 8000846:	50a3      	strne	r3, [r4, r2]
 8000848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800084c:	1961      	adds	r1, r4, r5
 800084e:	4294      	cmp	r4, r2
 8000850:	6025      	str	r5, [r4, #0]
 8000852:	bf14      	ite	ne
 8000854:	6051      	strne	r1, [r2, #4]
 8000856:	f8c8 1004 	streq.w	r1, [r8, #4]
 800085a:	5163      	str	r3, [r4, r5]
 800085c:	6863      	ldr	r3, [r4, #4]
 800085e:	604b      	str	r3, [r1, #4]
 8000860:	e7e6      	b.n	8000830 <_malloc_r+0x64>
 8000862:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8000866:	b31f      	cbz	r7, 80008b0 <_malloc_r+0xe4>
 8000868:	463c      	mov	r4, r7
 800086a:	687f      	ldr	r7, [r7, #4]
 800086c:	2f00      	cmp	r7, #0
 800086e:	d1fb      	bne.n	8000868 <_malloc_r+0x9c>
 8000870:	6823      	ldr	r3, [r4, #0]
 8000872:	4639      	mov	r1, r7
 8000874:	4630      	mov	r0, r6
 8000876:	eb04 0903 	add.w	r9, r4, r3
 800087a:	f000 fba7 	bl	8000fcc <_sbrk_r>
 800087e:	4581      	cmp	r9, r0
 8000880:	d116      	bne.n	80008b0 <_malloc_r+0xe4>
 8000882:	6823      	ldr	r3, [r4, #0]
 8000884:	1aed      	subs	r5, r5, r3
 8000886:	4629      	mov	r1, r5
 8000888:	4630      	mov	r0, r6
 800088a:	f7ff ff7b 	bl	8000784 <sbrk_aligned>
 800088e:	3001      	adds	r0, #1
 8000890:	d00e      	beq.n	80008b0 <_malloc_r+0xe4>
 8000892:	6823      	ldr	r3, [r4, #0]
 8000894:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8000898:	442b      	add	r3, r5
 800089a:	6023      	str	r3, [r4, #0]
 800089c:	6853      	ldr	r3, [r2, #4]
 800089e:	b183      	cbz	r3, 80008c2 <_malloc_r+0xf6>
 80008a0:	42a3      	cmp	r3, r4
 80008a2:	d003      	beq.n	80008ac <_malloc_r+0xe0>
 80008a4:	461a      	mov	r2, r3
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	429c      	cmp	r4, r3
 80008aa:	d1fb      	bne.n	80008a4 <_malloc_r+0xd8>
 80008ac:	2300      	movs	r3, #0
 80008ae:	e7b0      	b.n	8000812 <_malloc_r+0x46>
 80008b0:	230c      	movs	r3, #12
 80008b2:	6033      	str	r3, [r6, #0]
 80008b4:	4630      	mov	r0, r6
 80008b6:	f000 f8ed 	bl	8000a94 <__malloc_unlock>
 80008ba:	e7ae      	b.n	800081a <_malloc_r+0x4e>
 80008bc:	f8c8 3004 	str.w	r3, [r8, #4]
 80008c0:	e7b6      	b.n	8000830 <_malloc_r+0x64>
 80008c2:	f8c8 7004 	str.w	r7, [r8, #4]
 80008c6:	e7b3      	b.n	8000830 <_malloc_r+0x64>
 80008c8:	200001c4 	.word	0x200001c4

080008cc <_free_r>:
 80008cc:	2900      	cmp	r1, #0
 80008ce:	d050      	beq.n	8000972 <_free_r+0xa6>
 80008d0:	b538      	push	{r3, r4, r5, lr}
 80008d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80008d6:	1f0c      	subs	r4, r1, #4
 80008d8:	2b00      	cmp	r3, #0
 80008da:	bfb8      	it	lt
 80008dc:	18e4      	addlt	r4, r4, r3
 80008de:	4605      	mov	r5, r0
 80008e0:	f000 f8d6 	bl	8000a90 <__malloc_lock>
 80008e4:	4a27      	ldr	r2, [pc, #156]	@ (8000984 <_free_r+0xb8>)
 80008e6:	6813      	ldr	r3, [r2, #0]
 80008e8:	b12b      	cbz	r3, 80008f6 <_free_r+0x2a>
 80008ea:	42a3      	cmp	r3, r4
 80008ec:	d90c      	bls.n	8000908 <_free_r+0x3c>
 80008ee:	6821      	ldr	r1, [r4, #0]
 80008f0:	1860      	adds	r0, r4, r1
 80008f2:	4283      	cmp	r3, r0
 80008f4:	d02c      	beq.n	8000950 <_free_r+0x84>
 80008f6:	6063      	str	r3, [r4, #4]
 80008f8:	4628      	mov	r0, r5
 80008fa:	6014      	str	r4, [r2, #0]
 80008fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000900:	f000 b8c8 	b.w	8000a94 <__malloc_unlock>
 8000904:	42a3      	cmp	r3, r4
 8000906:	d80f      	bhi.n	8000928 <_free_r+0x5c>
 8000908:	461a      	mov	r2, r3
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d1f9      	bne.n	8000904 <_free_r+0x38>
 8000910:	6811      	ldr	r1, [r2, #0]
 8000912:	1850      	adds	r0, r2, r1
 8000914:	4284      	cmp	r4, r0
 8000916:	d017      	beq.n	8000948 <_free_r+0x7c>
 8000918:	d32c      	bcc.n	8000974 <_free_r+0xa8>
 800091a:	6063      	str	r3, [r4, #4]
 800091c:	6054      	str	r4, [r2, #4]
 800091e:	4628      	mov	r0, r5
 8000920:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000924:	f000 b8b6 	b.w	8000a94 <__malloc_unlock>
 8000928:	6811      	ldr	r1, [r2, #0]
 800092a:	1850      	adds	r0, r2, r1
 800092c:	42a0      	cmp	r0, r4
 800092e:	d014      	beq.n	800095a <_free_r+0x8e>
 8000930:	d820      	bhi.n	8000974 <_free_r+0xa8>
 8000932:	6821      	ldr	r1, [r4, #0]
 8000934:	1860      	adds	r0, r4, r1
 8000936:	4283      	cmp	r3, r0
 8000938:	d1ef      	bne.n	800091a <_free_r+0x4e>
 800093a:	6818      	ldr	r0, [r3, #0]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	4408      	add	r0, r1
 8000940:	e9c4 0300 	strd	r0, r3, [r4]
 8000944:	6054      	str	r4, [r2, #4]
 8000946:	e7ea      	b.n	800091e <_free_r+0x52>
 8000948:	6823      	ldr	r3, [r4, #0]
 800094a:	440b      	add	r3, r1
 800094c:	6013      	str	r3, [r2, #0]
 800094e:	e7e6      	b.n	800091e <_free_r+0x52>
 8000950:	6818      	ldr	r0, [r3, #0]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	4408      	add	r0, r1
 8000956:	6020      	str	r0, [r4, #0]
 8000958:	e7cd      	b.n	80008f6 <_free_r+0x2a>
 800095a:	6820      	ldr	r0, [r4, #0]
 800095c:	4401      	add	r1, r0
 800095e:	1850      	adds	r0, r2, r1
 8000960:	4283      	cmp	r3, r0
 8000962:	6011      	str	r1, [r2, #0]
 8000964:	d1db      	bne.n	800091e <_free_r+0x52>
 8000966:	e9d3 0400 	ldrd	r0, r4, [r3]
 800096a:	4401      	add	r1, r0
 800096c:	e9c2 1400 	strd	r1, r4, [r2]
 8000970:	e7d5      	b.n	800091e <_free_r+0x52>
 8000972:	4770      	bx	lr
 8000974:	230c      	movs	r3, #12
 8000976:	602b      	str	r3, [r5, #0]
 8000978:	4628      	mov	r0, r5
 800097a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800097e:	f000 b889 	b.w	8000a94 <__malloc_unlock>
 8000982:	bf00      	nop
 8000984:	200001c8 	.word	0x200001c8

08000988 <_fwalk_sglue>:
 8000988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800098c:	4607      	mov	r7, r0
 800098e:	4688      	mov	r8, r1
 8000990:	4616      	mov	r6, r2
 8000992:	f04f 0900 	mov.w	r9, #0
 8000996:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
 800099a:	3d01      	subs	r5, #1
 800099c:	d410      	bmi.n	80009c0 <_fwalk_sglue+0x38>
 800099e:	89a3      	ldrh	r3, [r4, #12]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d908      	bls.n	80009b6 <_fwalk_sglue+0x2e>
 80009a4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80009a8:	3301      	adds	r3, #1
 80009aa:	4621      	mov	r1, r4
 80009ac:	4638      	mov	r0, r7
 80009ae:	d002      	beq.n	80009b6 <_fwalk_sglue+0x2e>
 80009b0:	47c0      	blx	r8
 80009b2:	ea49 0900 	orr.w	r9, r9, r0
 80009b6:	3d01      	subs	r5, #1
 80009b8:	1c6b      	adds	r3, r5, #1
 80009ba:	f104 0468 	add.w	r4, r4, #104	@ 0x68
 80009be:	d1ee      	bne.n	800099e <_fwalk_sglue+0x16>
 80009c0:	6836      	ldr	r6, [r6, #0]
 80009c2:	2e00      	cmp	r6, #0
 80009c4:	d1e7      	bne.n	8000996 <_fwalk_sglue+0xe>
 80009c6:	4648      	mov	r0, r9
 80009c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080009cc <__swsetup_r>:
 80009cc:	b538      	push	{r3, r4, r5, lr}
 80009ce:	4b2f      	ldr	r3, [pc, #188]	@ (8000a8c <__swsetup_r+0xc0>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4605      	mov	r5, r0
 80009d4:	460c      	mov	r4, r1
 80009d6:	b113      	cbz	r3, 80009de <__swsetup_r+0x12>
 80009d8:	6a1a      	ldr	r2, [r3, #32]
 80009da:	2a00      	cmp	r2, #0
 80009dc:	d04b      	beq.n	8000a76 <__swsetup_r+0xaa>
 80009de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80009e2:	0718      	lsls	r0, r3, #28
 80009e4:	d51c      	bpl.n	8000a20 <__swsetup_r+0x54>
 80009e6:	6922      	ldr	r2, [r4, #16]
 80009e8:	b322      	cbz	r2, 8000a34 <__swsetup_r+0x68>
 80009ea:	f013 0101 	ands.w	r1, r3, #1
 80009ee:	d007      	beq.n	8000a00 <__swsetup_r+0x34>
 80009f0:	6961      	ldr	r1, [r4, #20]
 80009f2:	2000      	movs	r0, #0
 80009f4:	4249      	negs	r1, r1
 80009f6:	60a0      	str	r0, [r4, #8]
 80009f8:	61a1      	str	r1, [r4, #24]
 80009fa:	b13a      	cbz	r2, 8000a0c <__swsetup_r+0x40>
 80009fc:	2000      	movs	r0, #0
 80009fe:	bd38      	pop	{r3, r4, r5, pc}
 8000a00:	0798      	lsls	r0, r3, #30
 8000a02:	bf58      	it	pl
 8000a04:	6961      	ldrpl	r1, [r4, #20]
 8000a06:	60a1      	str	r1, [r4, #8]
 8000a08:	2a00      	cmp	r2, #0
 8000a0a:	d1f7      	bne.n	80009fc <__swsetup_r+0x30>
 8000a0c:	0619      	lsls	r1, r3, #24
 8000a0e:	bf58      	it	pl
 8000a10:	4610      	movpl	r0, r2
 8000a12:	d5f4      	bpl.n	80009fe <__swsetup_r+0x32>
 8000a14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a18:	81a3      	strh	r3, [r4, #12]
 8000a1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a1e:	bd38      	pop	{r3, r4, r5, pc}
 8000a20:	06d9      	lsls	r1, r3, #27
 8000a22:	d52c      	bpl.n	8000a7e <__swsetup_r+0xb2>
 8000a24:	075a      	lsls	r2, r3, #29
 8000a26:	d412      	bmi.n	8000a4e <__swsetup_r+0x82>
 8000a28:	6922      	ldr	r2, [r4, #16]
 8000a2a:	f043 0308 	orr.w	r3, r3, #8
 8000a2e:	81a3      	strh	r3, [r4, #12]
 8000a30:	2a00      	cmp	r2, #0
 8000a32:	d1da      	bne.n	80009ea <__swsetup_r+0x1e>
 8000a34:	f403 7120 	and.w	r1, r3, #640	@ 0x280
 8000a38:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8000a3c:	d0d5      	beq.n	80009ea <__swsetup_r+0x1e>
 8000a3e:	4621      	mov	r1, r4
 8000a40:	4628      	mov	r0, r5
 8000a42:	f000 f829 	bl	8000a98 <__smakebuf_r>
 8000a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a4a:	6922      	ldr	r2, [r4, #16]
 8000a4c:	e7cd      	b.n	80009ea <__swsetup_r+0x1e>
 8000a4e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000a50:	b151      	cbz	r1, 8000a68 <__swsetup_r+0x9c>
 8000a52:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 8000a56:	4291      	cmp	r1, r2
 8000a58:	d004      	beq.n	8000a64 <__swsetup_r+0x98>
 8000a5a:	4628      	mov	r0, r5
 8000a5c:	f7ff ff36 	bl	80008cc <_free_r>
 8000a60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a64:	2200      	movs	r2, #0
 8000a66:	6362      	str	r2, [r4, #52]	@ 0x34
 8000a68:	6922      	ldr	r2, [r4, #16]
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	e9c4 2100 	strd	r2, r1, [r4]
 8000a70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000a74:	e7d9      	b.n	8000a2a <__swsetup_r+0x5e>
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fd30 	bl	80004dc <__sinit>
 8000a7c:	e7af      	b.n	80009de <__swsetup_r+0x12>
 8000a7e:	2209      	movs	r2, #9
 8000a80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a84:	602a      	str	r2, [r5, #0]
 8000a86:	81a3      	strh	r3, [r4, #12]
 8000a88:	e7c7      	b.n	8000a1a <__swsetup_r+0x4e>
 8000a8a:	bf00      	nop
 8000a8c:	2000000c 	.word	0x2000000c

08000a90 <__malloc_lock>:
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__malloc_unlock>:
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__smakebuf_r>:
 8000a98:	b570      	push	{r4, r5, r6, lr}
 8000a9a:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8000a9e:	460c      	mov	r4, r1
 8000aa0:	0799      	lsls	r1, r3, #30
 8000aa2:	b096      	sub	sp, #88	@ 0x58
 8000aa4:	d507      	bpl.n	8000ab6 <__smakebuf_r+0x1e>
 8000aa6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000aaa:	2201      	movs	r2, #1
 8000aac:	e9c4 3204 	strd	r3, r2, [r4, #16]
 8000ab0:	6023      	str	r3, [r4, #0]
 8000ab2:	b016      	add	sp, #88	@ 0x58
 8000ab4:	bd70      	pop	{r4, r5, r6, pc}
 8000ab6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000aba:	2900      	cmp	r1, #0
 8000abc:	4605      	mov	r5, r0
 8000abe:	db29      	blt.n	8000b14 <__smakebuf_r+0x7c>
 8000ac0:	466a      	mov	r2, sp
 8000ac2:	f000 fffb 	bl	8001abc <_fstat_r>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	db22      	blt.n	8000b10 <__smakebuf_r+0x78>
 8000aca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ace:	4628      	mov	r0, r5
 8000ad0:	9e01      	ldr	r6, [sp, #4]
 8000ad2:	f7ff fe7b 	bl	80007cc <_malloc_r>
 8000ad6:	b388      	cbz	r0, 8000b3c <__smakebuf_r+0xa4>
 8000ad8:	89a3      	ldrh	r3, [r4, #12]
 8000ada:	6020      	str	r0, [r4, #0]
 8000adc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ae0:	f406 4670 	and.w	r6, r6, #61440	@ 0xf000
 8000ae4:	81a3      	strh	r3, [r4, #12]
 8000ae6:	f5b6 5f00 	cmp.w	r6, #8192	@ 0x2000
 8000aea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000aee:	e9c4 0304 	strd	r0, r3, [r4, #16]
 8000af2:	d1de      	bne.n	8000ab2 <__smakebuf_r+0x1a>
 8000af4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000af8:	4628      	mov	r0, r5
 8000afa:	f000 f87b 	bl	8000bf4 <_isatty_r>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	d0d7      	beq.n	8000ab2 <__smakebuf_r+0x1a>
 8000b02:	89a3      	ldrh	r3, [r4, #12]
 8000b04:	f023 0303 	bic.w	r3, r3, #3
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	81a3      	strh	r3, [r4, #12]
 8000b0e:	e7d0      	b.n	8000ab2 <__smakebuf_r+0x1a>
 8000b10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b14:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000b18:	bf14      	ite	ne
 8000b1a:	2640      	movne	r6, #64	@ 0x40
 8000b1c:	f44f 6680 	moveq.w	r6, #1024	@ 0x400
 8000b20:	4631      	mov	r1, r6
 8000b22:	4628      	mov	r0, r5
 8000b24:	f7ff fe52 	bl	80007cc <_malloc_r>
 8000b28:	b140      	cbz	r0, 8000b3c <__smakebuf_r+0xa4>
 8000b2a:	89a3      	ldrh	r3, [r4, #12]
 8000b2c:	6020      	str	r0, [r4, #0]
 8000b2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b32:	e9c4 0604 	strd	r0, r6, [r4, #16]
 8000b36:	81a3      	strh	r3, [r4, #12]
 8000b38:	b016      	add	sp, #88	@ 0x58
 8000b3a:	bd70      	pop	{r4, r5, r6, pc}
 8000b3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b40:	059a      	lsls	r2, r3, #22
 8000b42:	d4b6      	bmi.n	8000ab2 <__smakebuf_r+0x1a>
 8000b44:	f023 0303 	bic.w	r3, r3, #3
 8000b48:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8000b4c:	f043 0302 	orr.w	r3, r3, #2
 8000b50:	2101      	movs	r1, #1
 8000b52:	e9c4 2104 	strd	r2, r1, [r4, #16]
 8000b56:	81a3      	strh	r3, [r4, #12]
 8000b58:	6022      	str	r2, [r4, #0]
 8000b5a:	e7aa      	b.n	8000ab2 <__smakebuf_r+0x1a>

08000b5c <__swhatbuf_r>:
 8000b5c:	b570      	push	{r4, r5, r6, lr}
 8000b5e:	460c      	mov	r4, r1
 8000b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b64:	2900      	cmp	r1, #0
 8000b66:	b096      	sub	sp, #88	@ 0x58
 8000b68:	4615      	mov	r5, r2
 8000b6a:	461e      	mov	r6, r3
 8000b6c:	db0f      	blt.n	8000b8e <__swhatbuf_r+0x32>
 8000b6e:	466a      	mov	r2, sp
 8000b70:	f000 ffa4 	bl	8001abc <_fstat_r>
 8000b74:	2800      	cmp	r0, #0
 8000b76:	db0a      	blt.n	8000b8e <__swhatbuf_r+0x32>
 8000b78:	9b01      	ldr	r3, [sp, #4]
 8000b7a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8000b7e:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 8000b82:	fab3 f383 	clz	r3, r3
 8000b86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b8a:	095b      	lsrs	r3, r3, #5
 8000b8c:	e008      	b.n	8000ba0 <__swhatbuf_r+0x44>
 8000b8e:	89a2      	ldrh	r2, [r4, #12]
 8000b90:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8000b94:	f04f 0300 	mov.w	r3, #0
 8000b98:	bf14      	ite	ne
 8000b9a:	2240      	movne	r2, #64	@ 0x40
 8000b9c:	f44f 6280 	moveq.w	r2, #1024	@ 0x400
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	6033      	str	r3, [r6, #0]
 8000ba4:	602a      	str	r2, [r5, #0]
 8000ba6:	b016      	add	sp, #88	@ 0x58
 8000ba8:	bd70      	pop	{r4, r5, r6, pc}
 8000baa:	bf00      	nop

08000bac <_iprintf_r>:
 8000bac:	b40e      	push	{r1, r2, r3}
 8000bae:	b500      	push	{lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	ab03      	add	r3, sp, #12
 8000bb4:	6881      	ldr	r1, [r0, #8]
 8000bb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8000bba:	9301      	str	r3, [sp, #4]
 8000bbc:	f000 f872 	bl	8000ca4 <_vfiprintf_r>
 8000bc0:	b002      	add	sp, #8
 8000bc2:	f85d eb04 	ldr.w	lr, [sp], #4
 8000bc6:	b003      	add	sp, #12
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <iprintf>:
 8000bcc:	b40f      	push	{r0, r1, r2, r3}
 8000bce:	b500      	push	{lr}
 8000bd0:	4907      	ldr	r1, [pc, #28]	@ (8000bf0 <iprintf+0x24>)
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	ab04      	add	r3, sp, #16
 8000bd6:	6808      	ldr	r0, [r1, #0]
 8000bd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8000bdc:	6881      	ldr	r1, [r0, #8]
 8000bde:	9301      	str	r3, [sp, #4]
 8000be0:	f000 f860 	bl	8000ca4 <_vfiprintf_r>
 8000be4:	b003      	add	sp, #12
 8000be6:	f85d eb04 	ldr.w	lr, [sp], #4
 8000bea:	b004      	add	sp, #16
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	2000000c 	.word	0x2000000c

08000bf4 <_isatty_r>:
 8000bf4:	b538      	push	{r3, r4, r5, lr}
 8000bf6:	4d07      	ldr	r5, [pc, #28]	@ (8000c14 <_isatty_r+0x20>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	4604      	mov	r4, r0
 8000bfc:	4608      	mov	r0, r1
 8000bfe:	602a      	str	r2, [r5, #0]
 8000c00:	f001 f927 	bl	8001e52 <_isatty>
 8000c04:	1c43      	adds	r3, r0, #1
 8000c06:	d000      	beq.n	8000c0a <_isatty_r+0x16>
 8000c08:	bd38      	pop	{r3, r4, r5, pc}
 8000c0a:	682b      	ldr	r3, [r5, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d0fb      	beq.n	8000c08 <_isatty_r+0x14>
 8000c10:	6023      	str	r3, [r4, #0]
 8000c12:	bd38      	pop	{r3, r4, r5, pc}
 8000c14:	200001cc 	.word	0x200001cc

08000c18 <__sfputc_r>:
 8000c18:	6893      	ldr	r3, [r2, #8]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	6093      	str	r3, [r2, #8]
 8000c20:	da11      	bge.n	8000c46 <__sfputc_r+0x2e>
 8000c22:	b410      	push	{r4}
 8000c24:	6994      	ldr	r4, [r2, #24]
 8000c26:	42a3      	cmp	r3, r4
 8000c28:	db09      	blt.n	8000c3e <__sfputc_r+0x26>
 8000c2a:	290a      	cmp	r1, #10
 8000c2c:	d007      	beq.n	8000c3e <__sfputc_r+0x26>
 8000c2e:	6813      	ldr	r3, [r2, #0]
 8000c30:	1c58      	adds	r0, r3, #1
 8000c32:	6010      	str	r0, [r2, #0]
 8000c34:	7019      	strb	r1, [r3, #0]
 8000c36:	4608      	mov	r0, r1
 8000c38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c42:	f000 b973 	b.w	8000f2c <__swbuf_r>
 8000c46:	6813      	ldr	r3, [r2, #0]
 8000c48:	1c58      	adds	r0, r3, #1
 8000c4a:	6010      	str	r0, [r2, #0]
 8000c4c:	7019      	strb	r1, [r3, #0]
 8000c4e:	4608      	mov	r0, r1
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <__sfputs_r>:
 8000c54:	b19b      	cbz	r3, 8000c7e <__sfputs_r+0x2a>
 8000c56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c58:	4413      	add	r3, r2
 8000c5a:	4606      	mov	r6, r0
 8000c5c:	460f      	mov	r7, r1
 8000c5e:	1e54      	subs	r4, r2, #1
 8000c60:	1e5d      	subs	r5, r3, #1
 8000c62:	e001      	b.n	8000c68 <__sfputs_r+0x14>
 8000c64:	42ac      	cmp	r4, r5
 8000c66:	d008      	beq.n	8000c7a <__sfputs_r+0x26>
 8000c68:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000c6c:	463a      	mov	r2, r7
 8000c6e:	4630      	mov	r0, r6
 8000c70:	f7ff ffd2 	bl	8000c18 <__sfputc_r>
 8000c74:	1c43      	adds	r3, r0, #1
 8000c76:	d1f5      	bne.n	8000c64 <__sfputs_r+0x10>
 8000c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c7e:	2000      	movs	r0, #0
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop

08000c84 <__sprint_r>:
 8000c84:	6893      	ldr	r3, [r2, #8]
 8000c86:	b510      	push	{r4, lr}
 8000c88:	4614      	mov	r4, r2
 8000c8a:	b91b      	cbnz	r3, 8000c94 <__sprint_r+0x10>
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	2300      	movs	r3, #0
 8000c90:	6063      	str	r3, [r4, #4]
 8000c92:	bd10      	pop	{r4, pc}
 8000c94:	f000 f9f6 	bl	8001084 <__sfvwrite_r>
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60a3      	str	r3, [r4, #8]
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	6063      	str	r3, [r4, #4]
 8000ca0:	bd10      	pop	{r4, pc}
 8000ca2:	bf00      	nop

08000ca4 <_vfiprintf_r>:
 8000ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ca8:	b0a1      	sub	sp, #132	@ 0x84
 8000caa:	468b      	mov	fp, r1
 8000cac:	4691      	mov	r9, r2
 8000cae:	461c      	mov	r4, r3
 8000cb0:	9004      	str	r0, [sp, #16]
 8000cb2:	b118      	cbz	r0, 8000cbc <_vfiprintf_r+0x18>
 8000cb4:	6a03      	ldr	r3, [r0, #32]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f000 811c 	beq.w	8000ef4 <_vfiprintf_r+0x250>
 8000cbc:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8000cc0:	0718      	lsls	r0, r3, #28
 8000cc2:	f140 8095 	bpl.w	8000df0 <_vfiprintf_r+0x14c>
 8000cc6:	f8db 3010 	ldr.w	r3, [fp, #16]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	f000 8090 	beq.w	8000df0 <_vfiprintf_r+0x14c>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	46ca      	mov	sl, r9
 8000cd4:	930d      	str	r3, [sp, #52]	@ 0x34
 8000cd6:	f243 0320 	movw	r3, #12320	@ 0x3020
 8000cda:	f8ad 3039 	strh.w	r3, [sp, #57]	@ 0x39
 8000cde:	f89a 3000 	ldrb.w	r3, [sl]
 8000ce2:	4e86      	ldr	r6, [pc, #536]	@ (8000efc <_vfiprintf_r+0x258>)
 8000ce4:	9407      	str	r4, [sp, #28]
 8000ce6:	2701      	movs	r7, #1
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d079      	beq.n	8000de0 <_vfiprintf_r+0x13c>
 8000cec:	46d1      	mov	r9, sl
 8000cee:	e004      	b.n	8000cfa <_vfiprintf_r+0x56>
 8000cf0:	f819 3f01 	ldrb.w	r3, [r9, #1]!
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	f000 8085 	beq.w	8000e04 <_vfiprintf_r+0x160>
 8000cfa:	2b25      	cmp	r3, #37	@ 0x25
 8000cfc:	d1f8      	bne.n	8000cf0 <_vfiprintf_r+0x4c>
 8000cfe:	ebb9 080a 	subs.w	r8, r9, sl
 8000d02:	f040 8082 	bne.w	8000e0a <_vfiprintf_r+0x166>
 8000d06:	f899 3000 	ldrb.w	r3, [r9]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d068      	beq.n	8000de0 <_vfiprintf_r+0x13c>
 8000d0e:	2300      	movs	r3, #0
 8000d10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d14:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
 8000d18:	f109 0901 	add.w	r9, r9, #1
 8000d1c:	9308      	str	r3, [sp, #32]
 8000d1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000d20:	f88d 3063 	strb.w	r3, [sp, #99]	@ 0x63
 8000d24:	931e      	str	r3, [sp, #120]	@ 0x78
 8000d26:	e005      	b.n	8000d34 <_vfiprintf_r+0x90>
 8000d28:	9a08      	ldr	r2, [sp, #32]
 8000d2a:	fa07 f303 	lsl.w	r3, r7, r3
 8000d2e:	431a      	orrs	r2, r3
 8000d30:	9208      	str	r2, [sp, #32]
 8000d32:	46a1      	mov	r9, r4
 8000d34:	464c      	mov	r4, r9
 8000d36:	2205      	movs	r2, #5
 8000d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	f000 fbb7 	bl	80014b0 <memchr>
 8000d42:	46a2      	mov	sl, r4
 8000d44:	1b83      	subs	r3, r0, r6
 8000d46:	2800      	cmp	r0, #0
 8000d48:	d1ee      	bne.n	8000d28 <_vfiprintf_r+0x84>
 8000d4a:	9b08      	ldr	r3, [sp, #32]
 8000d4c:	06d9      	lsls	r1, r3, #27
 8000d4e:	bf44      	itt	mi
 8000d50:	2220      	movmi	r2, #32
 8000d52:	f88d 2063 	strbmi.w	r2, [sp, #99]	@ 0x63
 8000d56:	f899 1000 	ldrb.w	r1, [r9]
 8000d5a:	071a      	lsls	r2, r3, #28
 8000d5c:	bf44      	itt	mi
 8000d5e:	222b      	movmi	r2, #43	@ 0x2b
 8000d60:	f88d 2063 	strbmi.w	r2, [sp, #99]	@ 0x63
 8000d64:	292a      	cmp	r1, #42	@ 0x2a
 8000d66:	d166      	bne.n	8000e36 <_vfiprintf_r+0x192>
 8000d68:	9a07      	ldr	r2, [sp, #28]
 8000d6a:	6811      	ldr	r1, [r2, #0]
 8000d6c:	3204      	adds	r2, #4
 8000d6e:	2900      	cmp	r1, #0
 8000d70:	9207      	str	r2, [sp, #28]
 8000d72:	f2c0 809a 	blt.w	8000eaa <_vfiprintf_r+0x206>
 8000d76:	910b      	str	r1, [sp, #44]	@ 0x2c
 8000d78:	f899 1001 	ldrb.w	r1, [r9, #1]
 8000d7c:	292e      	cmp	r1, #46	@ 0x2e
 8000d7e:	d070      	beq.n	8000e62 <_vfiprintf_r+0x1be>
 8000d80:	4c5f      	ldr	r4, [pc, #380]	@ (8000f00 <_vfiprintf_r+0x25c>)
 8000d82:	2203      	movs	r2, #3
 8000d84:	4620      	mov	r0, r4
 8000d86:	f000 fb93 	bl	80014b0 <memchr>
 8000d8a:	b138      	cbz	r0, 8000d9c <_vfiprintf_r+0xf8>
 8000d8c:	9b08      	ldr	r3, [sp, #32]
 8000d8e:	1b00      	subs	r0, r0, r4
 8000d90:	2240      	movs	r2, #64	@ 0x40
 8000d92:	4082      	lsls	r2, r0
 8000d94:	4313      	orrs	r3, r2
 8000d96:	f10a 0a01 	add.w	sl, sl, #1
 8000d9a:	9308      	str	r3, [sp, #32]
 8000d9c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8000da0:	4858      	ldr	r0, [pc, #352]	@ (8000f04 <_vfiprintf_r+0x260>)
 8000da2:	f88d 1038 	strb.w	r1, [sp, #56]	@ 0x38
 8000da6:	2206      	movs	r2, #6
 8000da8:	f000 fb82 	bl	80014b0 <memchr>
 8000dac:	2800      	cmp	r0, #0
 8000dae:	f000 8082 	beq.w	8000eb6 <_vfiprintf_r+0x212>
 8000db2:	4b55      	ldr	r3, [pc, #340]	@ (8000f08 <_vfiprintf_r+0x264>)
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d069      	beq.n	8000e8c <_vfiprintf_r+0x1e8>
 8000db8:	aa07      	add	r2, sp, #28
 8000dba:	9200      	str	r2, [sp, #0]
 8000dbc:	4b53      	ldr	r3, [pc, #332]	@ (8000f0c <_vfiprintf_r+0x268>)
 8000dbe:	9804      	ldr	r0, [sp, #16]
 8000dc0:	465a      	mov	r2, fp
 8000dc2:	a908      	add	r1, sp, #32
 8000dc4:	f3af 8000 	nop.w
 8000dc8:	9003      	str	r0, [sp, #12]
 8000dca:	9b03      	ldr	r3, [sp, #12]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	d007      	beq.n	8000de0 <_vfiprintf_r+0x13c>
 8000dd0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8000dd2:	9a03      	ldr	r2, [sp, #12]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	930d      	str	r3, [sp, #52]	@ 0x34
 8000dd8:	f89a 3000 	ldrb.w	r3, [sl]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d185      	bne.n	8000cec <_vfiprintf_r+0x48>
 8000de0:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8000de4:	065b      	lsls	r3, r3, #25
 8000de6:	d40a      	bmi.n	8000dfe <_vfiprintf_r+0x15a>
 8000de8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8000dea:	b021      	add	sp, #132	@ 0x84
 8000dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000df0:	9804      	ldr	r0, [sp, #16]
 8000df2:	4659      	mov	r1, fp
 8000df4:	f7ff fdea 	bl	80009cc <__swsetup_r>
 8000df8:	2800      	cmp	r0, #0
 8000dfa:	f43f af69 	beq.w	8000cd0 <_vfiprintf_r+0x2c>
 8000dfe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e02:	e7f2      	b.n	8000dea <_vfiprintf_r+0x146>
 8000e04:	ebb9 080a 	subs.w	r8, r9, sl
 8000e08:	d0ea      	beq.n	8000de0 <_vfiprintf_r+0x13c>
 8000e0a:	f10a 35ff 	add.w	r5, sl, #4294967295	@ 0xffffffff
 8000e0e:	f8cd 9014 	str.w	r9, [sp, #20]
 8000e12:	46a9      	mov	r9, r5
 8000e14:	9d04      	ldr	r5, [sp, #16]
 8000e16:	e001      	b.n	8000e1c <_vfiprintf_r+0x178>
 8000e18:	45a0      	cmp	r8, r4
 8000e1a:	d93e      	bls.n	8000e9a <_vfiprintf_r+0x1f6>
 8000e1c:	464c      	mov	r4, r9
 8000e1e:	465a      	mov	r2, fp
 8000e20:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8000e24:	4628      	mov	r0, r5
 8000e26:	f7ff fef7 	bl	8000c18 <__sfputc_r>
 8000e2a:	3402      	adds	r4, #2
 8000e2c:	3001      	adds	r0, #1
 8000e2e:	eba4 040a 	sub.w	r4, r4, sl
 8000e32:	d1f1      	bne.n	8000e18 <_vfiprintf_r+0x174>
 8000e34:	e7d4      	b.n	8000de0 <_vfiprintf_r+0x13c>
 8000e36:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8000e3a:	2a09      	cmp	r2, #9
 8000e3c:	bf88      	it	hi
 8000e3e:	46ca      	movhi	sl, r9
 8000e40:	d89c      	bhi.n	8000d7c <_vfiprintf_r+0xd8>
 8000e42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8000e44:	e000      	b.n	8000e48 <_vfiprintf_r+0x1a4>
 8000e46:	3401      	adds	r4, #1
 8000e48:	7821      	ldrb	r1, [r4, #0]
 8000e4a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000e4e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000e52:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8000e56:	2a09      	cmp	r2, #9
 8000e58:	d9f5      	bls.n	8000e46 <_vfiprintf_r+0x1a2>
 8000e5a:	292e      	cmp	r1, #46	@ 0x2e
 8000e5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000e5e:	46a2      	mov	sl, r4
 8000e60:	d18e      	bne.n	8000d80 <_vfiprintf_r+0xdc>
 8000e62:	f89a 1001 	ldrb.w	r1, [sl, #1]
 8000e66:	292a      	cmp	r1, #42	@ 0x2a
 8000e68:	d12f      	bne.n	8000eca <_vfiprintf_r+0x226>
 8000e6a:	9b07      	ldr	r3, [sp, #28]
 8000e6c:	f89a 1002 	ldrb.w	r1, [sl, #2]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	9209      	str	r2, [sp, #36]	@ 0x24
 8000e74:	3304      	adds	r3, #4
 8000e76:	2a00      	cmp	r2, #0
 8000e78:	f10a 0002 	add.w	r0, sl, #2
 8000e7c:	9307      	str	r3, [sp, #28]
 8000e7e:	bfb8      	it	lt
 8000e80:	f04f 33ff 	movlt.w	r3, #4294967295	@ 0xffffffff
 8000e84:	4682      	mov	sl, r0
 8000e86:	bfb8      	it	lt
 8000e88:	9309      	strlt	r3, [sp, #36]	@ 0x24
 8000e8a:	e779      	b.n	8000d80 <_vfiprintf_r+0xdc>
 8000e8c:	9b07      	ldr	r3, [sp, #28]
 8000e8e:	3307      	adds	r3, #7
 8000e90:	f023 0307 	bic.w	r3, r3, #7
 8000e94:	3308      	adds	r3, #8
 8000e96:	9307      	str	r3, [sp, #28]
 8000e98:	e79a      	b.n	8000dd0 <_vfiprintf_r+0x12c>
 8000e9a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8000e9c:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8000ea0:	4441      	add	r1, r8
 8000ea2:	f899 3000 	ldrb.w	r3, [r9]
 8000ea6:	910d      	str	r1, [sp, #52]	@ 0x34
 8000ea8:	e72f      	b.n	8000d0a <_vfiprintf_r+0x66>
 8000eaa:	4249      	negs	r1, r1
 8000eac:	f043 0302 	orr.w	r3, r3, #2
 8000eb0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8000eb2:	9308      	str	r3, [sp, #32]
 8000eb4:	e760      	b.n	8000d78 <_vfiprintf_r+0xd4>
 8000eb6:	aa07      	add	r2, sp, #28
 8000eb8:	9200      	str	r2, [sp, #0]
 8000eba:	4b14      	ldr	r3, [pc, #80]	@ (8000f0c <_vfiprintf_r+0x268>)
 8000ebc:	9804      	ldr	r0, [sp, #16]
 8000ebe:	465a      	mov	r2, fp
 8000ec0:	a908      	add	r1, sp, #32
 8000ec2:	f000 fcb9 	bl	8001838 <_printf_i>
 8000ec6:	9003      	str	r0, [sp, #12]
 8000ec8:	e77f      	b.n	8000dca <_vfiprintf_r+0x126>
 8000eca:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8000ece:	2300      	movs	r3, #0
 8000ed0:	2a09      	cmp	r2, #9
 8000ed2:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ed4:	f10a 0a01 	add.w	sl, sl, #1
 8000ed8:	f63f af52 	bhi.w	8000d80 <_vfiprintf_r+0xdc>
 8000edc:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 8000ee0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000ee4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000ee8:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8000eec:	2a09      	cmp	r2, #9
 8000eee:	d9f5      	bls.n	8000edc <_vfiprintf_r+0x238>
 8000ef0:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ef2:	e745      	b.n	8000d80 <_vfiprintf_r+0xdc>
 8000ef4:	f7ff faf2 	bl	80004dc <__sinit>
 8000ef8:	e6e0      	b.n	8000cbc <_vfiprintf_r+0x18>
 8000efa:	bf00      	nop
 8000efc:	08002008 	.word	0x08002008
 8000f00:	08002010 	.word	0x08002010
 8000f04:	08002014 	.word	0x08002014
 8000f08:	00000000 	.word	0x00000000
 8000f0c:	08000c55 	.word	0x08000c55

08000f10 <vfiprintf>:
 8000f10:	b410      	push	{r4}
 8000f12:	4c05      	ldr	r4, [pc, #20]	@ (8000f28 <vfiprintf+0x18>)
 8000f14:	4684      	mov	ip, r0
 8000f16:	4613      	mov	r3, r2
 8000f18:	6820      	ldr	r0, [r4, #0]
 8000f1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f1e:	460a      	mov	r2, r1
 8000f20:	4661      	mov	r1, ip
 8000f22:	f7ff bebf 	b.w	8000ca4 <_vfiprintf_r>
 8000f26:	bf00      	nop
 8000f28:	2000000c 	.word	0x2000000c

08000f2c <__swbuf_r>:
 8000f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f2e:	460d      	mov	r5, r1
 8000f30:	4614      	mov	r4, r2
 8000f32:	4606      	mov	r6, r0
 8000f34:	b110      	cbz	r0, 8000f3c <__swbuf_r+0x10>
 8000f36:	6a03      	ldr	r3, [r0, #32]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d037      	beq.n	8000fac <__swbuf_r+0x80>
 8000f3c:	89a3      	ldrh	r3, [r4, #12]
 8000f3e:	69a2      	ldr	r2, [r4, #24]
 8000f40:	60a2      	str	r2, [r4, #8]
 8000f42:	071a      	lsls	r2, r3, #28
 8000f44:	d519      	bpl.n	8000f7a <__swbuf_r+0x4e>
 8000f46:	6923      	ldr	r3, [r4, #16]
 8000f48:	b1bb      	cbz	r3, 8000f7a <__swbuf_r+0x4e>
 8000f4a:	6822      	ldr	r2, [r4, #0]
 8000f4c:	6961      	ldr	r1, [r4, #20]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	b2ed      	uxtb	r5, r5
 8000f52:	4299      	cmp	r1, r3
 8000f54:	462f      	mov	r7, r5
 8000f56:	dd20      	ble.n	8000f9a <__swbuf_r+0x6e>
 8000f58:	3301      	adds	r3, #1
 8000f5a:	68a1      	ldr	r1, [r4, #8]
 8000f5c:	3901      	subs	r1, #1
 8000f5e:	60a1      	str	r1, [r4, #8]
 8000f60:	1c51      	adds	r1, r2, #1
 8000f62:	6021      	str	r1, [r4, #0]
 8000f64:	7015      	strb	r5, [r2, #0]
 8000f66:	6962      	ldr	r2, [r4, #20]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d00d      	beq.n	8000f88 <__swbuf_r+0x5c>
 8000f6c:	89a3      	ldrh	r3, [r4, #12]
 8000f6e:	07db      	lsls	r3, r3, #31
 8000f70:	d501      	bpl.n	8000f76 <__swbuf_r+0x4a>
 8000f72:	2d0a      	cmp	r5, #10
 8000f74:	d008      	beq.n	8000f88 <__swbuf_r+0x5c>
 8000f76:	4638      	mov	r0, r7
 8000f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f7a:	4621      	mov	r1, r4
 8000f7c:	4630      	mov	r0, r6
 8000f7e:	f7ff fd25 	bl	80009cc <__swsetup_r>
 8000f82:	b938      	cbnz	r0, 8000f94 <__swbuf_r+0x68>
 8000f84:	6923      	ldr	r3, [r4, #16]
 8000f86:	e7e0      	b.n	8000f4a <__swbuf_r+0x1e>
 8000f88:	4621      	mov	r1, r4
 8000f8a:	4630      	mov	r0, r6
 8000f8c:	f7ff fbb2 	bl	80006f4 <_fflush_r>
 8000f90:	2800      	cmp	r0, #0
 8000f92:	d0f0      	beq.n	8000f76 <__swbuf_r+0x4a>
 8000f94:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8000f98:	e7ed      	b.n	8000f76 <__swbuf_r+0x4a>
 8000f9a:	4621      	mov	r1, r4
 8000f9c:	4630      	mov	r0, r6
 8000f9e:	f7ff fba9 	bl	80006f4 <_fflush_r>
 8000fa2:	2800      	cmp	r0, #0
 8000fa4:	d1f6      	bne.n	8000f94 <__swbuf_r+0x68>
 8000fa6:	6822      	ldr	r2, [r4, #0]
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e7d6      	b.n	8000f5a <__swbuf_r+0x2e>
 8000fac:	f7ff fa96 	bl	80004dc <__sinit>
 8000fb0:	e7c4      	b.n	8000f3c <__swbuf_r+0x10>
 8000fb2:	bf00      	nop

08000fb4 <__swbuf>:
 8000fb4:	b410      	push	{r4}
 8000fb6:	4c04      	ldr	r4, [pc, #16]	@ (8000fc8 <__swbuf+0x14>)
 8000fb8:	4603      	mov	r3, r0
 8000fba:	460a      	mov	r2, r1
 8000fbc:	6820      	ldr	r0, [r4, #0]
 8000fbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f7ff bfb2 	b.w	8000f2c <__swbuf_r>
 8000fc8:	2000000c 	.word	0x2000000c

08000fcc <_sbrk_r>:
 8000fcc:	b538      	push	{r3, r4, r5, lr}
 8000fce:	4d07      	ldr	r5, [pc, #28]	@ (8000fec <_sbrk_r+0x20>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	602a      	str	r2, [r5, #0]
 8000fd8:	f000 ff54 	bl	8001e84 <_sbrk>
 8000fdc:	1c43      	adds	r3, r0, #1
 8000fde:	d000      	beq.n	8000fe2 <_sbrk_r+0x16>
 8000fe0:	bd38      	pop	{r3, r4, r5, pc}
 8000fe2:	682b      	ldr	r3, [r5, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d0fb      	beq.n	8000fe0 <_sbrk_r+0x14>
 8000fe8:	6023      	str	r3, [r4, #0]
 8000fea:	bd38      	pop	{r3, r4, r5, pc}
 8000fec:	200001cc 	.word	0x200001cc

08000ff0 <__sread>:
 8000ff0:	b510      	push	{r4, lr}
 8000ff2:	460c      	mov	r4, r1
 8000ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ff8:	f000 fb44 	bl	8001684 <_read_r>
 8000ffc:	2800      	cmp	r0, #0
 8000ffe:	db03      	blt.n	8001008 <__sread+0x18>
 8001000:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001002:	4403      	add	r3, r0
 8001004:	6563      	str	r3, [r4, #84]	@ 0x54
 8001006:	bd10      	pop	{r4, pc}
 8001008:	89a3      	ldrh	r3, [r4, #12]
 800100a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800100e:	81a3      	strh	r3, [r4, #12]
 8001010:	bd10      	pop	{r4, pc}
 8001012:	bf00      	nop

08001014 <__seofread>:
 8001014:	2000      	movs	r0, #0
 8001016:	4770      	bx	lr

08001018 <__swrite>:
 8001018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800101c:	460c      	mov	r4, r1
 800101e:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 8001022:	461f      	mov	r7, r3
 8001024:	05cb      	lsls	r3, r1, #23
 8001026:	4605      	mov	r5, r0
 8001028:	4616      	mov	r6, r2
 800102a:	d40b      	bmi.n	8001044 <__swrite+0x2c>
 800102c:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 8001030:	81a1      	strh	r1, [r4, #12]
 8001032:	463b      	mov	r3, r7
 8001034:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001038:	4632      	mov	r2, r6
 800103a:	4628      	mov	r0, r5
 800103c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001040:	f000 bd68 	b.w	8001b14 <_write_r>
 8001044:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001048:	2302      	movs	r3, #2
 800104a:	2200      	movs	r2, #0
 800104c:	f000 fd4c 	bl	8001ae8 <_lseek_r>
 8001050:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8001054:	e7ea      	b.n	800102c <__swrite+0x14>
 8001056:	bf00      	nop

08001058 <__sseek>:
 8001058:	b510      	push	{r4, lr}
 800105a:	460c      	mov	r4, r1
 800105c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001060:	f000 fd42 	bl	8001ae8 <_lseek_r>
 8001064:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001068:	1c42      	adds	r2, r0, #1
 800106a:	bf0e      	itee	eq
 800106c:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001070:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001074:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001076:	81a3      	strh	r3, [r4, #12]
 8001078:	bd10      	pop	{r4, pc}
 800107a:	bf00      	nop

0800107c <__sclose>:
 800107c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001080:	f000 b980 	b.w	8001384 <_close_r>

08001084 <__sfvwrite_r>:
 8001084:	6893      	ldr	r3, [r2, #8]
 8001086:	2b00      	cmp	r3, #0
 8001088:	f000 80f8 	beq.w	800127c <__sfvwrite_r+0x1f8>
 800108c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001090:	f9b1 c00c 	ldrsh.w	ip, [r1, #12]
 8001094:	f01c 0f08 	tst.w	ip, #8
 8001098:	b083      	sub	sp, #12
 800109a:	4690      	mov	r8, r2
 800109c:	4681      	mov	r9, r0
 800109e:	460c      	mov	r4, r1
 80010a0:	d031      	beq.n	8001106 <__sfvwrite_r+0x82>
 80010a2:	690b      	ldr	r3, [r1, #16]
 80010a4:	b37b      	cbz	r3, 8001106 <__sfvwrite_r+0x82>
 80010a6:	f01c 0702 	ands.w	r7, ip, #2
 80010aa:	f8d8 6000 	ldr.w	r6, [r8]
 80010ae:	d038      	beq.n	8001122 <__sfvwrite_r+0x9e>
 80010b0:	2700      	movs	r7, #0
 80010b2:	f8d4 b028 	ldr.w	fp, [r4, #40]	@ 0x28
 80010b6:	6a21      	ldr	r1, [r4, #32]
 80010b8:	f8df a2c4 	ldr.w	sl, [pc, #708]	@ 8001380 <__sfvwrite_r+0x2fc>
 80010bc:	463d      	mov	r5, r7
 80010be:	4555      	cmp	r5, sl
 80010c0:	462b      	mov	r3, r5
 80010c2:	463a      	mov	r2, r7
 80010c4:	bf28      	it	cs
 80010c6:	4653      	movcs	r3, sl
 80010c8:	4648      	mov	r0, r9
 80010ca:	b1c5      	cbz	r5, 80010fe <__sfvwrite_r+0x7a>
 80010cc:	47d8      	blx	fp
 80010ce:	2800      	cmp	r0, #0
 80010d0:	f340 80ca 	ble.w	8001268 <__sfvwrite_r+0x1e4>
 80010d4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80010d8:	1a1b      	subs	r3, r3, r0
 80010da:	4407      	add	r7, r0
 80010dc:	1a2d      	subs	r5, r5, r0
 80010de:	f8c8 3008 	str.w	r3, [r8, #8]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f000 80b6 	beq.w	8001254 <__sfvwrite_r+0x1d0>
 80010e8:	4555      	cmp	r5, sl
 80010ea:	462b      	mov	r3, r5
 80010ec:	f8d4 b028 	ldr.w	fp, [r4, #40]	@ 0x28
 80010f0:	6a21      	ldr	r1, [r4, #32]
 80010f2:	bf28      	it	cs
 80010f4:	4653      	movcs	r3, sl
 80010f6:	463a      	mov	r2, r7
 80010f8:	4648      	mov	r0, r9
 80010fa:	2d00      	cmp	r5, #0
 80010fc:	d1e6      	bne.n	80010cc <__sfvwrite_r+0x48>
 80010fe:	e9d6 7500 	ldrd	r7, r5, [r6]
 8001102:	3608      	adds	r6, #8
 8001104:	e7db      	b.n	80010be <__sfvwrite_r+0x3a>
 8001106:	4621      	mov	r1, r4
 8001108:	4648      	mov	r0, r9
 800110a:	f7ff fc5f 	bl	80009cc <__swsetup_r>
 800110e:	2800      	cmp	r0, #0
 8001110:	f040 80af 	bne.w	8001272 <__sfvwrite_r+0x1ee>
 8001114:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 8001118:	f8d8 6000 	ldr.w	r6, [r8]
 800111c:	f01c 0702 	ands.w	r7, ip, #2
 8001120:	d1c6      	bne.n	80010b0 <__sfvwrite_r+0x2c>
 8001122:	f01c 0a01 	ands.w	sl, ip, #1
 8001126:	d163      	bne.n	80011f0 <__sfvwrite_r+0x16c>
 8001128:	6823      	ldr	r3, [r4, #0]
 800112a:	68a1      	ldr	r1, [r4, #8]
 800112c:	4657      	mov	r7, sl
 800112e:	4618      	mov	r0, r3
 8001130:	468b      	mov	fp, r1
 8001132:	2f00      	cmp	r7, #0
 8001134:	d058      	beq.n	80011e8 <__sfvwrite_r+0x164>
 8001136:	f41c 7f00 	tst.w	ip, #512	@ 0x200
 800113a:	f000 80b5 	beq.w	80012a8 <__sfvwrite_r+0x224>
 800113e:	42b9      	cmp	r1, r7
 8001140:	460a      	mov	r2, r1
 8001142:	f200 80e1 	bhi.w	8001308 <__sfvwrite_r+0x284>
 8001146:	f41c 6f90 	tst.w	ip, #1152	@ 0x480
 800114a:	d02f      	beq.n	80011ac <__sfvwrite_r+0x128>
 800114c:	6921      	ldr	r1, [r4, #16]
 800114e:	6962      	ldr	r2, [r4, #20]
 8001150:	1a5d      	subs	r5, r3, r1
 8001152:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001156:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800115a:	1c6b      	adds	r3, r5, #1
 800115c:	1052      	asrs	r2, r2, #1
 800115e:	443b      	add	r3, r7
 8001160:	4293      	cmp	r3, r2
 8001162:	bf92      	itee	ls
 8001164:	4693      	movls	fp, r2
 8001166:	469b      	movhi	fp, r3
 8001168:	461a      	movhi	r2, r3
 800116a:	f41c 6f80 	tst.w	ip, #1024	@ 0x400
 800116e:	f000 80ea 	beq.w	8001346 <__sfvwrite_r+0x2c2>
 8001172:	4611      	mov	r1, r2
 8001174:	4648      	mov	r0, r9
 8001176:	f7ff fb29 	bl	80007cc <_malloc_r>
 800117a:	2800      	cmp	r0, #0
 800117c:	f000 80f9 	beq.w	8001372 <__sfvwrite_r+0x2ee>
 8001180:	462a      	mov	r2, r5
 8001182:	6921      	ldr	r1, [r4, #16]
 8001184:	9000      	str	r0, [sp, #0]
 8001186:	f000 f9e3 	bl	8001550 <memcpy>
 800118a:	89a2      	ldrh	r2, [r4, #12]
 800118c:	9b00      	ldr	r3, [sp, #0]
 800118e:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8001192:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001196:	81a2      	strh	r2, [r4, #12]
 8001198:	1958      	adds	r0, r3, r5
 800119a:	ebab 0505 	sub.w	r5, fp, r5
 800119e:	f8c4 b014 	str.w	fp, [r4, #20]
 80011a2:	6123      	str	r3, [r4, #16]
 80011a4:	60a5      	str	r5, [r4, #8]
 80011a6:	6020      	str	r0, [r4, #0]
 80011a8:	46bb      	mov	fp, r7
 80011aa:	463a      	mov	r2, r7
 80011ac:	4651      	mov	r1, sl
 80011ae:	9200      	str	r2, [sp, #0]
 80011b0:	f000 f8fa 	bl	80013a8 <memmove>
 80011b4:	68a1      	ldr	r1, [r4, #8]
 80011b6:	6823      	ldr	r3, [r4, #0]
 80011b8:	9a00      	ldr	r2, [sp, #0]
 80011ba:	eba1 010b 	sub.w	r1, r1, fp
 80011be:	441a      	add	r2, r3
 80011c0:	463d      	mov	r5, r7
 80011c2:	60a1      	str	r1, [r4, #8]
 80011c4:	6022      	str	r2, [r4, #0]
 80011c6:	2700      	movs	r7, #0
 80011c8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80011cc:	1b5b      	subs	r3, r3, r5
 80011ce:	44aa      	add	sl, r5
 80011d0:	f8c8 3008 	str.w	r3, [r8, #8]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d03d      	beq.n	8001254 <__sfvwrite_r+0x1d0>
 80011d8:	6823      	ldr	r3, [r4, #0]
 80011da:	68a1      	ldr	r1, [r4, #8]
 80011dc:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 80011e0:	4618      	mov	r0, r3
 80011e2:	468b      	mov	fp, r1
 80011e4:	2f00      	cmp	r7, #0
 80011e6:	d1a6      	bne.n	8001136 <__sfvwrite_r+0xb2>
 80011e8:	e9d6 a700 	ldrd	sl, r7, [r6]
 80011ec:	3608      	adds	r6, #8
 80011ee:	e79e      	b.n	800112e <__sfvwrite_r+0xaa>
 80011f0:	4638      	mov	r0, r7
 80011f2:	46bb      	mov	fp, r7
 80011f4:	463d      	mov	r5, r7
 80011f6:	9700      	str	r7, [sp, #0]
 80011f8:	2d00      	cmp	r5, #0
 80011fa:	d041      	beq.n	8001280 <__sfvwrite_r+0x1fc>
 80011fc:	2800      	cmp	r0, #0
 80011fe:	d046      	beq.n	800128e <__sfvwrite_r+0x20a>
 8001200:	9a00      	ldr	r2, [sp, #0]
 8001202:	6820      	ldr	r0, [r4, #0]
 8001204:	68a1      	ldr	r1, [r4, #8]
 8001206:	e9d4 7304 	ldrd	r7, r3, [r4, #16]
 800120a:	42aa      	cmp	r2, r5
 800120c:	bf28      	it	cs
 800120e:	462a      	movcs	r2, r5
 8001210:	42b8      	cmp	r0, r7
 8001212:	d904      	bls.n	800121e <__sfvwrite_r+0x19a>
 8001214:	eb01 0a03 	add.w	sl, r1, r3
 8001218:	4552      	cmp	r2, sl
 800121a:	f300 8085 	bgt.w	8001328 <__sfvwrite_r+0x2a4>
 800121e:	4293      	cmp	r3, r2
 8001220:	dc75      	bgt.n	800130e <__sfvwrite_r+0x28a>
 8001222:	6a21      	ldr	r1, [r4, #32]
 8001224:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 8001226:	465a      	mov	r2, fp
 8001228:	4648      	mov	r0, r9
 800122a:	47b8      	blx	r7
 800122c:	f1b0 0a00 	subs.w	sl, r0, #0
 8001230:	dd1a      	ble.n	8001268 <__sfvwrite_r+0x1e4>
 8001232:	9b00      	ldr	r3, [sp, #0]
 8001234:	ebb3 030a 	subs.w	r3, r3, sl
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	d00f      	beq.n	800125c <__sfvwrite_r+0x1d8>
 800123c:	2001      	movs	r0, #1
 800123e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001242:	eba3 030a 	sub.w	r3, r3, sl
 8001246:	44d3      	add	fp, sl
 8001248:	eba5 050a 	sub.w	r5, r5, sl
 800124c:	f8c8 3008 	str.w	r3, [r8, #8]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1d1      	bne.n	80011f8 <__sfvwrite_r+0x174>
 8001254:	2000      	movs	r0, #0
 8001256:	b003      	add	sp, #12
 8001258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800125c:	4621      	mov	r1, r4
 800125e:	4648      	mov	r0, r9
 8001260:	f7ff fa48 	bl	80006f4 <_fflush_r>
 8001264:	2800      	cmp	r0, #0
 8001266:	d0ea      	beq.n	800123e <__sfvwrite_r+0x1ba>
 8001268:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800126c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001270:	81a3      	strh	r3, [r4, #12]
 8001272:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001276:	b003      	add	sp, #12
 8001278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800127c:	2000      	movs	r0, #0
 800127e:	4770      	bx	lr
 8001280:	6875      	ldr	r5, [r6, #4]
 8001282:	4633      	mov	r3, r6
 8001284:	3608      	adds	r6, #8
 8001286:	2d00      	cmp	r5, #0
 8001288:	d0fa      	beq.n	8001280 <__sfvwrite_r+0x1fc>
 800128a:	f8d3 b000 	ldr.w	fp, [r3]
 800128e:	462a      	mov	r2, r5
 8001290:	210a      	movs	r1, #10
 8001292:	4658      	mov	r0, fp
 8001294:	f000 f90c 	bl	80014b0 <memchr>
 8001298:	2800      	cmp	r0, #0
 800129a:	d067      	beq.n	800136c <__sfvwrite_r+0x2e8>
 800129c:	3001      	adds	r0, #1
 800129e:	eba0 030b 	sub.w	r3, r0, fp
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	e7ac      	b.n	8001202 <__sfvwrite_r+0x17e>
 80012a8:	6922      	ldr	r2, [r4, #16]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d314      	bcc.n	80012d8 <__sfvwrite_r+0x254>
 80012ae:	6962      	ldr	r2, [r4, #20]
 80012b0:	42ba      	cmp	r2, r7
 80012b2:	d811      	bhi.n	80012d8 <__sfvwrite_r+0x254>
 80012b4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80012b8:	42bb      	cmp	r3, r7
 80012ba:	bf28      	it	cs
 80012bc:	463b      	movcs	r3, r7
 80012be:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80012c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80012c4:	6a21      	ldr	r1, [r4, #32]
 80012c6:	fb02 f303 	mul.w	r3, r2, r3
 80012ca:	4648      	mov	r0, r9
 80012cc:	4652      	mov	r2, sl
 80012ce:	47a8      	blx	r5
 80012d0:	1e05      	subs	r5, r0, #0
 80012d2:	ddc9      	ble.n	8001268 <__sfvwrite_r+0x1e4>
 80012d4:	1b7f      	subs	r7, r7, r5
 80012d6:	e777      	b.n	80011c8 <__sfvwrite_r+0x144>
 80012d8:	42b9      	cmp	r1, r7
 80012da:	bf28      	it	cs
 80012dc:	4639      	movcs	r1, r7
 80012de:	460d      	mov	r5, r1
 80012e0:	4618      	mov	r0, r3
 80012e2:	460a      	mov	r2, r1
 80012e4:	4651      	mov	r1, sl
 80012e6:	f000 f85f 	bl	80013a8 <memmove>
 80012ea:	68a1      	ldr	r1, [r4, #8]
 80012ec:	6823      	ldr	r3, [r4, #0]
 80012ee:	1b49      	subs	r1, r1, r5
 80012f0:	442b      	add	r3, r5
 80012f2:	60a1      	str	r1, [r4, #8]
 80012f4:	6023      	str	r3, [r4, #0]
 80012f6:	2900      	cmp	r1, #0
 80012f8:	d1ec      	bne.n	80012d4 <__sfvwrite_r+0x250>
 80012fa:	4621      	mov	r1, r4
 80012fc:	4648      	mov	r0, r9
 80012fe:	f7ff f9f9 	bl	80006f4 <_fflush_r>
 8001302:	2800      	cmp	r0, #0
 8001304:	d0e6      	beq.n	80012d4 <__sfvwrite_r+0x250>
 8001306:	e7af      	b.n	8001268 <__sfvwrite_r+0x1e4>
 8001308:	46bb      	mov	fp, r7
 800130a:	463a      	mov	r2, r7
 800130c:	e74e      	b.n	80011ac <__sfvwrite_r+0x128>
 800130e:	4659      	mov	r1, fp
 8001310:	9201      	str	r2, [sp, #4]
 8001312:	f000 f849 	bl	80013a8 <memmove>
 8001316:	9a01      	ldr	r2, [sp, #4]
 8001318:	68a3      	ldr	r3, [r4, #8]
 800131a:	1a9b      	subs	r3, r3, r2
 800131c:	60a3      	str	r3, [r4, #8]
 800131e:	6823      	ldr	r3, [r4, #0]
 8001320:	4413      	add	r3, r2
 8001322:	6023      	str	r3, [r4, #0]
 8001324:	4692      	mov	sl, r2
 8001326:	e784      	b.n	8001232 <__sfvwrite_r+0x1ae>
 8001328:	4659      	mov	r1, fp
 800132a:	4652      	mov	r2, sl
 800132c:	f000 f83c 	bl	80013a8 <memmove>
 8001330:	6823      	ldr	r3, [r4, #0]
 8001332:	4453      	add	r3, sl
 8001334:	6023      	str	r3, [r4, #0]
 8001336:	4621      	mov	r1, r4
 8001338:	4648      	mov	r0, r9
 800133a:	f7ff f9db 	bl	80006f4 <_fflush_r>
 800133e:	2800      	cmp	r0, #0
 8001340:	f43f af77 	beq.w	8001232 <__sfvwrite_r+0x1ae>
 8001344:	e790      	b.n	8001268 <__sfvwrite_r+0x1e4>
 8001346:	4648      	mov	r0, r9
 8001348:	f000 f9b2 	bl	80016b0 <_realloc_r>
 800134c:	4603      	mov	r3, r0
 800134e:	2800      	cmp	r0, #0
 8001350:	f47f af22 	bne.w	8001198 <__sfvwrite_r+0x114>
 8001354:	6921      	ldr	r1, [r4, #16]
 8001356:	4648      	mov	r0, r9
 8001358:	f7ff fab8 	bl	80008cc <_free_r>
 800135c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001360:	220c      	movs	r2, #12
 8001362:	f8c9 2000 	str.w	r2, [r9]
 8001366:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800136a:	e77f      	b.n	800126c <__sfvwrite_r+0x1e8>
 800136c:	1c6a      	adds	r2, r5, #1
 800136e:	9200      	str	r2, [sp, #0]
 8001370:	e747      	b.n	8001202 <__sfvwrite_r+0x17e>
 8001372:	220c      	movs	r2, #12
 8001374:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001378:	f8c9 2000 	str.w	r2, [r9]
 800137c:	e776      	b.n	800126c <__sfvwrite_r+0x1e8>
 800137e:	bf00      	nop
 8001380:	7ffffc00 	.word	0x7ffffc00

08001384 <_close_r>:
 8001384:	b538      	push	{r3, r4, r5, lr}
 8001386:	4d07      	ldr	r5, [pc, #28]	@ (80013a4 <_close_r+0x20>)
 8001388:	2200      	movs	r2, #0
 800138a:	4604      	mov	r4, r0
 800138c:	4608      	mov	r0, r1
 800138e:	602a      	str	r2, [r5, #0]
 8001390:	f000 fd43 	bl	8001e1a <_close>
 8001394:	1c43      	adds	r3, r0, #1
 8001396:	d000      	beq.n	800139a <_close_r+0x16>
 8001398:	bd38      	pop	{r3, r4, r5, pc}
 800139a:	682b      	ldr	r3, [r5, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0fb      	beq.n	8001398 <_close_r+0x14>
 80013a0:	6023      	str	r3, [r4, #0]
 80013a2:	bd38      	pop	{r3, r4, r5, pc}
 80013a4:	200001cc 	.word	0x200001cc

080013a8 <memmove>:
 80013a8:	4288      	cmp	r0, r1
 80013aa:	d90e      	bls.n	80013ca <memmove+0x22>
 80013ac:	188b      	adds	r3, r1, r2
 80013ae:	4283      	cmp	r3, r0
 80013b0:	d90b      	bls.n	80013ca <memmove+0x22>
 80013b2:	eb00 0c02 	add.w	ip, r0, r2
 80013b6:	2a00      	cmp	r2, #0
 80013b8:	d06e      	beq.n	8001498 <memmove+0xf0>
 80013ba:	4662      	mov	r2, ip
 80013bc:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 80013c0:	f802 cd01 	strb.w	ip, [r2, #-1]!
 80013c4:	4299      	cmp	r1, r3
 80013c6:	d1f9      	bne.n	80013bc <memmove+0x14>
 80013c8:	4770      	bx	lr
 80013ca:	2a0f      	cmp	r2, #15
 80013cc:	d80f      	bhi.n	80013ee <memmove+0x46>
 80013ce:	4603      	mov	r3, r0
 80013d0:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
 80013d4:	2a00      	cmp	r2, #0
 80013d6:	d05f      	beq.n	8001498 <memmove+0xf0>
 80013d8:	f10c 0c01 	add.w	ip, ip, #1
 80013dc:	3b01      	subs	r3, #1
 80013de:	448c      	add	ip, r1
 80013e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80013e4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80013e8:	4561      	cmp	r1, ip
 80013ea:	d1f9      	bne.n	80013e0 <memmove+0x38>
 80013ec:	4770      	bx	lr
 80013ee:	ea40 0301 	orr.w	r3, r0, r1
 80013f2:	079b      	lsls	r3, r3, #30
 80013f4:	d151      	bne.n	800149a <memmove+0xf2>
 80013f6:	f1a2 0310 	sub.w	r3, r2, #16
 80013fa:	b570      	push	{r4, r5, r6, lr}
 80013fc:	f101 0c20 	add.w	ip, r1, #32
 8001400:	f023 050f 	bic.w	r5, r3, #15
 8001404:	f101 0e10 	add.w	lr, r1, #16
 8001408:	f100 0410 	add.w	r4, r0, #16
 800140c:	44ac      	add	ip, r5
 800140e:	091b      	lsrs	r3, r3, #4
 8001410:	f85e 5c10 	ldr.w	r5, [lr, #-16]
 8001414:	f844 5c10 	str.w	r5, [r4, #-16]
 8001418:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
 800141c:	f844 5c0c 	str.w	r5, [r4, #-12]
 8001420:	f85e 5c08 	ldr.w	r5, [lr, #-8]
 8001424:	f844 5c08 	str.w	r5, [r4, #-8]
 8001428:	f85e 5c04 	ldr.w	r5, [lr, #-4]
 800142c:	f844 5c04 	str.w	r5, [r4, #-4]
 8001430:	f10e 0e10 	add.w	lr, lr, #16
 8001434:	45e6      	cmp	lr, ip
 8001436:	f104 0410 	add.w	r4, r4, #16
 800143a:	d1e9      	bne.n	8001410 <memmove+0x68>
 800143c:	3301      	adds	r3, #1
 800143e:	f012 0f0c 	tst.w	r2, #12
 8001442:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8001446:	f002 040f 	and.w	r4, r2, #15
 800144a:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 800144e:	d028      	beq.n	80014a2 <memmove+0xfa>
 8001450:	3c04      	subs	r4, #4
 8001452:	f024 0603 	bic.w	r6, r4, #3
 8001456:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 800145a:	441e      	add	r6, r3
 800145c:	1f1c      	subs	r4, r3, #4
 800145e:	468e      	mov	lr, r1
 8001460:	f85e 5b04 	ldr.w	r5, [lr], #4
 8001464:	f844 5f04 	str.w	r5, [r4, #4]!
 8001468:	42b4      	cmp	r4, r6
 800146a:	d1f9      	bne.n	8001460 <memmove+0xb8>
 800146c:	f10c 0401 	add.w	r4, ip, #1
 8001470:	f002 0203 	and.w	r2, r2, #3
 8001474:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8001478:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800147c:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
 8001480:	b14a      	cbz	r2, 8001496 <memmove+0xee>
 8001482:	f10c 0c01 	add.w	ip, ip, #1
 8001486:	3b01      	subs	r3, #1
 8001488:	448c      	add	ip, r1
 800148a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800148e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001492:	4561      	cmp	r1, ip
 8001494:	d1f9      	bne.n	800148a <memmove+0xe2>
 8001496:	bd70      	pop	{r4, r5, r6, pc}
 8001498:	4770      	bx	lr
 800149a:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
 800149e:	4603      	mov	r3, r0
 80014a0:	e79a      	b.n	80013d8 <memmove+0x30>
 80014a2:	4622      	mov	r2, r4
 80014a4:	e7ea      	b.n	800147c <memmove+0xd4>
 80014a6:	bf00      	nop
	...

080014b0 <memchr>:
 80014b0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80014b4:	2a10      	cmp	r2, #16
 80014b6:	db2b      	blt.n	8001510 <memchr+0x60>
 80014b8:	f010 0f07 	tst.w	r0, #7
 80014bc:	d008      	beq.n	80014d0 <memchr+0x20>
 80014be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80014c2:	3a01      	subs	r2, #1
 80014c4:	428b      	cmp	r3, r1
 80014c6:	d02d      	beq.n	8001524 <memchr+0x74>
 80014c8:	f010 0f07 	tst.w	r0, #7
 80014cc:	b342      	cbz	r2, 8001520 <memchr+0x70>
 80014ce:	d1f6      	bne.n	80014be <memchr+0xe>
 80014d0:	b4f0      	push	{r4, r5, r6, r7}
 80014d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80014d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80014da:	f022 0407 	bic.w	r4, r2, #7
 80014de:	f07f 0700 	mvns.w	r7, #0
 80014e2:	2300      	movs	r3, #0
 80014e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80014e8:	3c08      	subs	r4, #8
 80014ea:	ea85 0501 	eor.w	r5, r5, r1
 80014ee:	ea86 0601 	eor.w	r6, r6, r1
 80014f2:	fa85 f547 	uadd8	r5, r5, r7
 80014f6:	faa3 f587 	sel	r5, r3, r7
 80014fa:	fa86 f647 	uadd8	r6, r6, r7
 80014fe:	faa5 f687 	sel	r6, r5, r7
 8001502:	b98e      	cbnz	r6, 8001528 <memchr+0x78>
 8001504:	d1ee      	bne.n	80014e4 <memchr+0x34>
 8001506:	bcf0      	pop	{r4, r5, r6, r7}
 8001508:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800150c:	f002 0207 	and.w	r2, r2, #7
 8001510:	b132      	cbz	r2, 8001520 <memchr+0x70>
 8001512:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001516:	3a01      	subs	r2, #1
 8001518:	ea83 0301 	eor.w	r3, r3, r1
 800151c:	b113      	cbz	r3, 8001524 <memchr+0x74>
 800151e:	d1f8      	bne.n	8001512 <memchr+0x62>
 8001520:	2000      	movs	r0, #0
 8001522:	4770      	bx	lr
 8001524:	3801      	subs	r0, #1
 8001526:	4770      	bx	lr
 8001528:	2d00      	cmp	r5, #0
 800152a:	bf06      	itte	eq
 800152c:	4635      	moveq	r5, r6
 800152e:	3803      	subeq	r0, #3
 8001530:	3807      	subne	r0, #7
 8001532:	f015 0f01 	tst.w	r5, #1
 8001536:	d107      	bne.n	8001548 <memchr+0x98>
 8001538:	3001      	adds	r0, #1
 800153a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800153e:	bf02      	ittt	eq
 8001540:	3001      	addeq	r0, #1
 8001542:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8001546:	3001      	addeq	r0, #1
 8001548:	bcf0      	pop	{r4, r5, r6, r7}
 800154a:	3801      	subs	r0, #1
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop

08001550 <memcpy>:
 8001550:	4684      	mov	ip, r0
 8001552:	ea41 0300 	orr.w	r3, r1, r0
 8001556:	f013 0303 	ands.w	r3, r3, #3
 800155a:	d16d      	bne.n	8001638 <memcpy+0xe8>
 800155c:	3a40      	subs	r2, #64	@ 0x40
 800155e:	d341      	bcc.n	80015e4 <memcpy+0x94>
 8001560:	f851 3b04 	ldr.w	r3, [r1], #4
 8001564:	f840 3b04 	str.w	r3, [r0], #4
 8001568:	f851 3b04 	ldr.w	r3, [r1], #4
 800156c:	f840 3b04 	str.w	r3, [r0], #4
 8001570:	f851 3b04 	ldr.w	r3, [r1], #4
 8001574:	f840 3b04 	str.w	r3, [r0], #4
 8001578:	f851 3b04 	ldr.w	r3, [r1], #4
 800157c:	f840 3b04 	str.w	r3, [r0], #4
 8001580:	f851 3b04 	ldr.w	r3, [r1], #4
 8001584:	f840 3b04 	str.w	r3, [r0], #4
 8001588:	f851 3b04 	ldr.w	r3, [r1], #4
 800158c:	f840 3b04 	str.w	r3, [r0], #4
 8001590:	f851 3b04 	ldr.w	r3, [r1], #4
 8001594:	f840 3b04 	str.w	r3, [r0], #4
 8001598:	f851 3b04 	ldr.w	r3, [r1], #4
 800159c:	f840 3b04 	str.w	r3, [r0], #4
 80015a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80015a4:	f840 3b04 	str.w	r3, [r0], #4
 80015a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80015ac:	f840 3b04 	str.w	r3, [r0], #4
 80015b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80015b4:	f840 3b04 	str.w	r3, [r0], #4
 80015b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80015bc:	f840 3b04 	str.w	r3, [r0], #4
 80015c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80015c4:	f840 3b04 	str.w	r3, [r0], #4
 80015c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80015cc:	f840 3b04 	str.w	r3, [r0], #4
 80015d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80015d4:	f840 3b04 	str.w	r3, [r0], #4
 80015d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80015dc:	f840 3b04 	str.w	r3, [r0], #4
 80015e0:	3a40      	subs	r2, #64	@ 0x40
 80015e2:	d2bd      	bcs.n	8001560 <memcpy+0x10>
 80015e4:	3230      	adds	r2, #48	@ 0x30
 80015e6:	d311      	bcc.n	800160c <memcpy+0xbc>
 80015e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80015ec:	f840 3b04 	str.w	r3, [r0], #4
 80015f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80015f4:	f840 3b04 	str.w	r3, [r0], #4
 80015f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80015fc:	f840 3b04 	str.w	r3, [r0], #4
 8001600:	f851 3b04 	ldr.w	r3, [r1], #4
 8001604:	f840 3b04 	str.w	r3, [r0], #4
 8001608:	3a10      	subs	r2, #16
 800160a:	d2ed      	bcs.n	80015e8 <memcpy+0x98>
 800160c:	320c      	adds	r2, #12
 800160e:	d305      	bcc.n	800161c <memcpy+0xcc>
 8001610:	f851 3b04 	ldr.w	r3, [r1], #4
 8001614:	f840 3b04 	str.w	r3, [r0], #4
 8001618:	3a04      	subs	r2, #4
 800161a:	d2f9      	bcs.n	8001610 <memcpy+0xc0>
 800161c:	3204      	adds	r2, #4
 800161e:	d008      	beq.n	8001632 <memcpy+0xe2>
 8001620:	07d2      	lsls	r2, r2, #31
 8001622:	bf1c      	itt	ne
 8001624:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001628:	f800 3b01 	strbne.w	r3, [r0], #1
 800162c:	d301      	bcc.n	8001632 <memcpy+0xe2>
 800162e:	880b      	ldrh	r3, [r1, #0]
 8001630:	8003      	strh	r3, [r0, #0]
 8001632:	4660      	mov	r0, ip
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	2a08      	cmp	r2, #8
 800163a:	d313      	bcc.n	8001664 <memcpy+0x114>
 800163c:	078b      	lsls	r3, r1, #30
 800163e:	d08d      	beq.n	800155c <memcpy+0xc>
 8001640:	f010 0303 	ands.w	r3, r0, #3
 8001644:	d08a      	beq.n	800155c <memcpy+0xc>
 8001646:	f1c3 0304 	rsb	r3, r3, #4
 800164a:	1ad2      	subs	r2, r2, r3
 800164c:	07db      	lsls	r3, r3, #31
 800164e:	bf1c      	itt	ne
 8001650:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001654:	f800 3b01 	strbne.w	r3, [r0], #1
 8001658:	d380      	bcc.n	800155c <memcpy+0xc>
 800165a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800165e:	f820 3b02 	strh.w	r3, [r0], #2
 8001662:	e77b      	b.n	800155c <memcpy+0xc>
 8001664:	3a04      	subs	r2, #4
 8001666:	d3d9      	bcc.n	800161c <memcpy+0xcc>
 8001668:	3a01      	subs	r2, #1
 800166a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800166e:	f800 3b01 	strb.w	r3, [r0], #1
 8001672:	d2f9      	bcs.n	8001668 <memcpy+0x118>
 8001674:	780b      	ldrb	r3, [r1, #0]
 8001676:	7003      	strb	r3, [r0, #0]
 8001678:	784b      	ldrb	r3, [r1, #1]
 800167a:	7043      	strb	r3, [r0, #1]
 800167c:	788b      	ldrb	r3, [r1, #2]
 800167e:	7083      	strb	r3, [r0, #2]
 8001680:	4660      	mov	r0, ip
 8001682:	4770      	bx	lr

08001684 <_read_r>:
 8001684:	b538      	push	{r3, r4, r5, lr}
 8001686:	460c      	mov	r4, r1
 8001688:	4d08      	ldr	r5, [pc, #32]	@ (80016ac <_read_r+0x28>)
 800168a:	4684      	mov	ip, r0
 800168c:	4611      	mov	r1, r2
 800168e:	4620      	mov	r0, r4
 8001690:	461a      	mov	r2, r3
 8001692:	2300      	movs	r3, #0
 8001694:	602b      	str	r3, [r5, #0]
 8001696:	4664      	mov	r4, ip
 8001698:	f000 fb86 	bl	8001da8 <_read>
 800169c:	1c43      	adds	r3, r0, #1
 800169e:	d000      	beq.n	80016a2 <_read_r+0x1e>
 80016a0:	bd38      	pop	{r3, r4, r5, pc}
 80016a2:	682b      	ldr	r3, [r5, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0fb      	beq.n	80016a0 <_read_r+0x1c>
 80016a8:	6023      	str	r3, [r4, #0]
 80016aa:	bd38      	pop	{r3, r4, r5, pc}
 80016ac:	200001cc 	.word	0x200001cc

080016b0 <_realloc_r>:
 80016b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016b4:	4614      	mov	r4, r2
 80016b6:	b341      	cbz	r1, 800170a <_realloc_r+0x5a>
 80016b8:	b30a      	cbz	r2, 80016fe <_realloc_r+0x4e>
 80016ba:	4606      	mov	r6, r0
 80016bc:	460d      	mov	r5, r1
 80016be:	f000 fa3f 	bl	8001b40 <_malloc_usable_size_r>
 80016c2:	4284      	cmp	r4, r0
 80016c4:	4607      	mov	r7, r0
 80016c6:	d802      	bhi.n	80016ce <_realloc_r+0x1e>
 80016c8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80016cc:	d813      	bhi.n	80016f6 <_realloc_r+0x46>
 80016ce:	4621      	mov	r1, r4
 80016d0:	4630      	mov	r0, r6
 80016d2:	f7ff f87b 	bl	80007cc <_malloc_r>
 80016d6:	4680      	mov	r8, r0
 80016d8:	b150      	cbz	r0, 80016f0 <_realloc_r+0x40>
 80016da:	42bc      	cmp	r4, r7
 80016dc:	4622      	mov	r2, r4
 80016de:	4629      	mov	r1, r5
 80016e0:	bf28      	it	cs
 80016e2:	463a      	movcs	r2, r7
 80016e4:	f7ff ff34 	bl	8001550 <memcpy>
 80016e8:	4629      	mov	r1, r5
 80016ea:	4630      	mov	r0, r6
 80016ec:	f7ff f8ee 	bl	80008cc <_free_r>
 80016f0:	4640      	mov	r0, r8
 80016f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016f6:	46a8      	mov	r8, r5
 80016f8:	4640      	mov	r0, r8
 80016fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016fe:	46a0      	mov	r8, r4
 8001700:	f7ff f8e4 	bl	80008cc <_free_r>
 8001704:	4640      	mov	r0, r8
 8001706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800170a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800170e:	4611      	mov	r1, r2
 8001710:	f7ff b85c 	b.w	80007cc <_malloc_r>

08001714 <_printf_common>:
 8001714:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001718:	4692      	mov	sl, r2
 800171a:	461f      	mov	r7, r3
 800171c:	690a      	ldr	r2, [r1, #16]
 800171e:	688b      	ldr	r3, [r1, #8]
 8001720:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8001724:	429a      	cmp	r2, r3
 8001726:	bfb8      	it	lt
 8001728:	461a      	movlt	r2, r3
 800172a:	f8ca 2000 	str.w	r2, [sl]
 800172e:	f891 3043 	ldrb.w	r3, [r1, #67]	@ 0x43
 8001732:	460c      	mov	r4, r1
 8001734:	4606      	mov	r6, r0
 8001736:	b113      	cbz	r3, 800173e <_printf_common+0x2a>
 8001738:	3201      	adds	r2, #1
 800173a:	f8ca 2000 	str.w	r2, [sl]
 800173e:	6822      	ldr	r2, [r4, #0]
 8001740:	0691      	lsls	r1, r2, #26
 8001742:	d55f      	bpl.n	8001804 <_printf_common+0xf0>
 8001744:	f8da 3000 	ldr.w	r3, [sl]
 8001748:	3302      	adds	r3, #2
 800174a:	f8ca 3000 	str.w	r3, [sl]
 800174e:	6822      	ldr	r2, [r4, #0]
 8001750:	f012 0f06 	tst.w	r2, #6
 8001754:	4611      	mov	r1, r2
 8001756:	d11d      	bne.n	8001794 <_printf_common+0x80>
 8001758:	68e1      	ldr	r1, [r4, #12]
 800175a:	4299      	cmp	r1, r3
 800175c:	bfd8      	it	le
 800175e:	4611      	movle	r1, r2
 8001760:	dd18      	ble.n	8001794 <_printf_common+0x80>
 8001762:	f04f 0800 	mov.w	r8, #0
 8001766:	f104 0b19 	add.w	fp, r4, #25
 800176a:	e005      	b.n	8001778 <_printf_common+0x64>
 800176c:	68e5      	ldr	r5, [r4, #12]
 800176e:	f8da 3000 	ldr.w	r3, [sl]
 8001772:	1aed      	subs	r5, r5, r3
 8001774:	4545      	cmp	r5, r8
 8001776:	dd0c      	ble.n	8001792 <_printf_common+0x7e>
 8001778:	2301      	movs	r3, #1
 800177a:	465a      	mov	r2, fp
 800177c:	4639      	mov	r1, r7
 800177e:	4630      	mov	r0, r6
 8001780:	47c8      	blx	r9
 8001782:	3001      	adds	r0, #1
 8001784:	f108 0801 	add.w	r8, r8, #1
 8001788:	d1f0      	bne.n	800176c <_printf_common+0x58>
 800178a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800178e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001792:	6821      	ldr	r1, [r4, #0]
 8001794:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001798:	3b00      	subs	r3, #0
 800179a:	bf18      	it	ne
 800179c:	2301      	movne	r3, #1
 800179e:	068a      	lsls	r2, r1, #26
 80017a0:	d50a      	bpl.n	80017b8 <_printf_common+0xa4>
 80017a2:	18e1      	adds	r1, r4, r3
 80017a4:	1c5a      	adds	r2, r3, #1
 80017a6:	2030      	movs	r0, #48	@ 0x30
 80017a8:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80017ac:	4422      	add	r2, r4
 80017ae:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80017b2:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80017b6:	3302      	adds	r3, #2
 80017b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80017bc:	4639      	mov	r1, r7
 80017be:	4630      	mov	r0, r6
 80017c0:	47c8      	blx	r9
 80017c2:	3001      	adds	r0, #1
 80017c4:	d0e1      	beq.n	800178a <_printf_common+0x76>
 80017c6:	6823      	ldr	r3, [r4, #0]
 80017c8:	f8da 5000 	ldr.w	r5, [sl]
 80017cc:	6921      	ldr	r1, [r4, #16]
 80017ce:	f003 0306 	and.w	r3, r3, #6
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 80017d8:	d01b      	beq.n	8001812 <_printf_common+0xfe>
 80017da:	428a      	cmp	r2, r1
 80017dc:	dd20      	ble.n	8001820 <_printf_common+0x10c>
 80017de:	f04f 0800 	mov.w	r8, #0
 80017e2:	1a52      	subs	r2, r2, r1
 80017e4:	4490      	add	r8, r2
 80017e6:	341a      	adds	r4, #26
 80017e8:	2500      	movs	r5, #0
 80017ea:	e001      	b.n	80017f0 <_printf_common+0xdc>
 80017ec:	4545      	cmp	r5, r8
 80017ee:	da17      	bge.n	8001820 <_printf_common+0x10c>
 80017f0:	2301      	movs	r3, #1
 80017f2:	4622      	mov	r2, r4
 80017f4:	4639      	mov	r1, r7
 80017f6:	4630      	mov	r0, r6
 80017f8:	47c8      	blx	r9
 80017fa:	3001      	adds	r0, #1
 80017fc:	f105 0501 	add.w	r5, r5, #1
 8001800:	d1f4      	bne.n	80017ec <_printf_common+0xd8>
 8001802:	e7c2      	b.n	800178a <_printf_common+0x76>
 8001804:	f012 0f06 	tst.w	r2, #6
 8001808:	d00d      	beq.n	8001826 <_printf_common+0x112>
 800180a:	3b00      	subs	r3, #0
 800180c:	bf18      	it	ne
 800180e:	2301      	movne	r3, #1
 8001810:	e7d2      	b.n	80017b8 <_printf_common+0xa4>
 8001812:	1b40      	subs	r0, r0, r5
 8001814:	428a      	cmp	r2, r1
 8001816:	ea20 78e0 	bic.w	r8, r0, r0, asr #31
 800181a:	dce2      	bgt.n	80017e2 <_printf_common+0xce>
 800181c:	2800      	cmp	r0, #0
 800181e:	dce2      	bgt.n	80017e6 <_printf_common+0xd2>
 8001820:	2000      	movs	r0, #0
 8001822:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001826:	68e1      	ldr	r1, [r4, #12]
 8001828:	f8da 3000 	ldr.w	r3, [sl]
 800182c:	4299      	cmp	r1, r3
 800182e:	bfd8      	it	le
 8001830:	4611      	movle	r1, r2
 8001832:	dc96      	bgt.n	8001762 <_printf_common+0x4e>
 8001834:	e7ae      	b.n	8001794 <_printf_common+0x80>
 8001836:	bf00      	nop

08001838 <_printf_i>:
 8001838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800183c:	4617      	mov	r7, r2
 800183e:	b084      	sub	sp, #16
 8001840:	7e0a      	ldrb	r2, [r1, #24]
 8001842:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8001844:	460c      	mov	r4, r1
 8001846:	4606      	mov	r6, r0
 8001848:	4698      	mov	r8, r3
 800184a:	f101 0c43 	add.w	ip, r1, #67	@ 0x43
 800184e:	2a00      	cmp	r2, #0
 8001850:	d035      	beq.n	80018be <_printf_i+0x86>
 8001852:	f1a2 0358 	sub.w	r3, r2, #88	@ 0x58
 8001856:	b2d9      	uxtb	r1, r3
 8001858:	2920      	cmp	r1, #32
 800185a:	d869      	bhi.n	8001930 <_printf_i+0xf8>
 800185c:	2b20      	cmp	r3, #32
 800185e:	d867      	bhi.n	8001930 <_printf_i+0xf8>
 8001860:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001864:	006600e6 	.word	0x006600e6
 8001868:	00660066 	.word	0x00660066
 800186c:	00660066 	.word	0x00660066
 8001870:	00660066 	.word	0x00660066
 8001874:	00660066 	.word	0x00660066
 8001878:	00ac0066 	.word	0x00ac0066
 800187c:	00660070 	.word	0x00660070
 8001880:	00660066 	.word	0x00660066
 8001884:	00700066 	.word	0x00700066
 8001888:	00660066 	.word	0x00660066
 800188c:	00660066 	.word	0x00660066
 8001890:	00830021 	.word	0x00830021
 8001894:	006600c6 	.word	0x006600c6
 8001898:	00b60066 	.word	0x00b60066
 800189c:	00830066 	.word	0x00830066
 80018a0:	00660066 	.word	0x00660066
 80018a4:	00ec      	.short	0x00ec
 80018a6:	682b      	ldr	r3, [r5, #0]
 80018a8:	6822      	ldr	r2, [r4, #0]
 80018aa:	6961      	ldr	r1, [r4, #20]
 80018ac:	1d18      	adds	r0, r3, #4
 80018ae:	6028      	str	r0, [r5, #0]
 80018b0:	0610      	lsls	r0, r2, #24
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	d402      	bmi.n	80018bc <_printf_i+0x84>
 80018b6:	0652      	lsls	r2, r2, #25
 80018b8:	f100 80e0 	bmi.w	8001a7c <_printf_i+0x244>
 80018bc:	6019      	str	r1, [r3, #0]
 80018be:	2300      	movs	r3, #0
 80018c0:	46e1      	mov	r9, ip
 80018c2:	6123      	str	r3, [r4, #16]
 80018c4:	f8cd 8000 	str.w	r8, [sp]
 80018c8:	463b      	mov	r3, r7
 80018ca:	aa03      	add	r2, sp, #12
 80018cc:	4621      	mov	r1, r4
 80018ce:	4630      	mov	r0, r6
 80018d0:	f7ff ff20 	bl	8001714 <_printf_common>
 80018d4:	3001      	adds	r0, #1
 80018d6:	d020      	beq.n	800191a <_printf_i+0xe2>
 80018d8:	6923      	ldr	r3, [r4, #16]
 80018da:	464a      	mov	r2, r9
 80018dc:	4639      	mov	r1, r7
 80018de:	4630      	mov	r0, r6
 80018e0:	47c0      	blx	r8
 80018e2:	3001      	adds	r0, #1
 80018e4:	d019      	beq.n	800191a <_printf_i+0xe2>
 80018e6:	6823      	ldr	r3, [r4, #0]
 80018e8:	68e0      	ldr	r0, [r4, #12]
 80018ea:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80018ee:	079b      	lsls	r3, r3, #30
 80018f0:	d518      	bpl.n	8001924 <_printf_i+0xec>
 80018f2:	4548      	cmp	r0, r9
 80018f4:	dd16      	ble.n	8001924 <_printf_i+0xec>
 80018f6:	2500      	movs	r5, #0
 80018f8:	f104 0a19 	add.w	sl, r4, #25
 80018fc:	e004      	b.n	8001908 <_printf_i+0xd0>
 80018fe:	68e0      	ldr	r0, [r4, #12]
 8001900:	eba0 0309 	sub.w	r3, r0, r9
 8001904:	42ab      	cmp	r3, r5
 8001906:	dd0d      	ble.n	8001924 <_printf_i+0xec>
 8001908:	2301      	movs	r3, #1
 800190a:	4652      	mov	r2, sl
 800190c:	4639      	mov	r1, r7
 800190e:	4630      	mov	r0, r6
 8001910:	47c0      	blx	r8
 8001912:	3001      	adds	r0, #1
 8001914:	f105 0501 	add.w	r5, r5, #1
 8001918:	d1f1      	bne.n	80018fe <_printf_i+0xc6>
 800191a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800191e:	b004      	add	sp, #16
 8001920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001924:	4548      	cmp	r0, r9
 8001926:	bfb8      	it	lt
 8001928:	4648      	movlt	r0, r9
 800192a:	b004      	add	sp, #16
 800192c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001930:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
 8001934:	2001      	movs	r0, #1
 8001936:	f104 0942 	add.w	r9, r4, #66	@ 0x42
 800193a:	2300      	movs	r3, #0
 800193c:	6120      	str	r0, [r4, #16]
 800193e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001942:	e7bf      	b.n	80018c4 <_printf_i+0x8c>
 8001944:	682a      	ldr	r2, [r5, #0]
 8001946:	6823      	ldr	r3, [r4, #0]
 8001948:	1d11      	adds	r1, r2, #4
 800194a:	0618      	lsls	r0, r3, #24
 800194c:	6029      	str	r1, [r5, #0]
 800194e:	d402      	bmi.n	8001956 <_printf_i+0x11e>
 8001950:	0659      	lsls	r1, r3, #25
 8001952:	f100 8095 	bmi.w	8001a80 <_printf_i+0x248>
 8001956:	6810      	ldr	r0, [r2, #0]
 8001958:	4601      	mov	r1, r0
 800195a:	2800      	cmp	r0, #0
 800195c:	6862      	ldr	r2, [r4, #4]
 800195e:	f2c0 8093 	blt.w	8001a88 <_printf_i+0x250>
 8001962:	4854      	ldr	r0, [pc, #336]	@ (8001ab4 <_printf_i+0x27c>)
 8001964:	f04f 0e0a 	mov.w	lr, #10
 8001968:	e015      	b.n	8001996 <_printf_i+0x15e>
 800196a:	6820      	ldr	r0, [r4, #0]
 800196c:	682b      	ldr	r3, [r5, #0]
 800196e:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8001972:	f853 1b04 	ldr.w	r1, [r3], #4
 8001976:	d102      	bne.n	800197e <_printf_i+0x146>
 8001978:	0640      	lsls	r0, r0, #25
 800197a:	bf48      	it	mi
 800197c:	b289      	uxthmi	r1, r1
 800197e:	2a6f      	cmp	r2, #111	@ 0x6f
 8001980:	484c      	ldr	r0, [pc, #304]	@ (8001ab4 <_printf_i+0x27c>)
 8001982:	602b      	str	r3, [r5, #0]
 8001984:	bf14      	ite	ne
 8001986:	f04f 0e0a 	movne.w	lr, #10
 800198a:	f04f 0e08 	moveq.w	lr, #8
 800198e:	2300      	movs	r3, #0
 8001990:	6862      	ldr	r2, [r4, #4]
 8001992:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001996:	2a00      	cmp	r2, #0
 8001998:	60a2      	str	r2, [r4, #8]
 800199a:	db51      	blt.n	8001a40 <_printf_i+0x208>
 800199c:	6823      	ldr	r3, [r4, #0]
 800199e:	f023 0304 	bic.w	r3, r3, #4
 80019a2:	6023      	str	r3, [r4, #0]
 80019a4:	2900      	cmp	r1, #0
 80019a6:	d14b      	bne.n	8001a40 <_printf_i+0x208>
 80019a8:	2a00      	cmp	r2, #0
 80019aa:	d17b      	bne.n	8001aa4 <_printf_i+0x26c>
 80019ac:	46e1      	mov	r9, ip
 80019ae:	f1be 0f08 	cmp.w	lr, #8
 80019b2:	d056      	beq.n	8001a62 <_printf_i+0x22a>
 80019b4:	ebac 0309 	sub.w	r3, ip, r9
 80019b8:	6123      	str	r3, [r4, #16]
 80019ba:	e783      	b.n	80018c4 <_printf_i+0x8c>
 80019bc:	682b      	ldr	r3, [r5, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	3304      	adds	r3, #4
 80019c2:	602b      	str	r3, [r5, #0]
 80019c4:	f104 0942 	add.w	r9, r4, #66	@ 0x42
 80019c8:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
 80019cc:	2001      	movs	r0, #1
 80019ce:	e7b4      	b.n	800193a <_printf_i+0x102>
 80019d0:	682b      	ldr	r3, [r5, #0]
 80019d2:	6862      	ldr	r2, [r4, #4]
 80019d4:	1d19      	adds	r1, r3, #4
 80019d6:	6029      	str	r1, [r5, #0]
 80019d8:	f8d3 9000 	ldr.w	r9, [r3]
 80019dc:	2100      	movs	r1, #0
 80019de:	4648      	mov	r0, r9
 80019e0:	f7ff fd66 	bl	80014b0 <memchr>
 80019e4:	2800      	cmp	r0, #0
 80019e6:	d063      	beq.n	8001ab0 <_printf_i+0x278>
 80019e8:	eba0 0009 	sub.w	r0, r0, r9
 80019ec:	6060      	str	r0, [r4, #4]
 80019ee:	e7a4      	b.n	800193a <_printf_i+0x102>
 80019f0:	6823      	ldr	r3, [r4, #0]
 80019f2:	f043 0320 	orr.w	r3, r3, #32
 80019f6:	6023      	str	r3, [r4, #0]
 80019f8:	2278      	movs	r2, #120	@ 0x78
 80019fa:	482f      	ldr	r0, [pc, #188]	@ (8001ab8 <_printf_i+0x280>)
 80019fc:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
 8001a00:	682a      	ldr	r2, [r5, #0]
 8001a02:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001a06:	f852 1b04 	ldr.w	r1, [r2], #4
 8001a0a:	d103      	bne.n	8001a14 <_printf_i+0x1dc>
 8001a0c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001a10:	bf18      	it	ne
 8001a12:	b289      	uxthne	r1, r1
 8001a14:	602a      	str	r2, [r5, #0]
 8001a16:	07da      	lsls	r2, r3, #31
 8001a18:	bf44      	itt	mi
 8001a1a:	f043 0320 	orrmi.w	r3, r3, #32
 8001a1e:	6023      	strmi	r3, [r4, #0]
 8001a20:	b919      	cbnz	r1, 8001a2a <_printf_i+0x1f2>
 8001a22:	6823      	ldr	r3, [r4, #0]
 8001a24:	f023 0320 	bic.w	r3, r3, #32
 8001a28:	6023      	str	r3, [r4, #0]
 8001a2a:	f04f 0e10 	mov.w	lr, #16
 8001a2e:	e7ae      	b.n	800198e <_printf_i+0x156>
 8001a30:	2358      	movs	r3, #88	@ 0x58
 8001a32:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8001a36:	481f      	ldr	r0, [pc, #124]	@ (8001ab4 <_printf_i+0x27c>)
 8001a38:	6823      	ldr	r3, [r4, #0]
 8001a3a:	e7e1      	b.n	8001a00 <_printf_i+0x1c8>
 8001a3c:	6823      	ldr	r3, [r4, #0]
 8001a3e:	e7db      	b.n	80019f8 <_printf_i+0x1c0>
 8001a40:	4675      	mov	r5, lr
 8001a42:	46e1      	mov	r9, ip
 8001a44:	fbb1 f3f5 	udiv	r3, r1, r5
 8001a48:	fb05 1a13 	mls	sl, r5, r3, r1
 8001a4c:	460a      	mov	r2, r1
 8001a4e:	42aa      	cmp	r2, r5
 8001a50:	f810 100a 	ldrb.w	r1, [r0, sl]
 8001a54:	f809 1d01 	strb.w	r1, [r9, #-1]!
 8001a58:	4619      	mov	r1, r3
 8001a5a:	d2f3      	bcs.n	8001a44 <_printf_i+0x20c>
 8001a5c:	f1be 0f08 	cmp.w	lr, #8
 8001a60:	d1a8      	bne.n	80019b4 <_printf_i+0x17c>
 8001a62:	6823      	ldr	r3, [r4, #0]
 8001a64:	07dd      	lsls	r5, r3, #31
 8001a66:	d5a5      	bpl.n	80019b4 <_printf_i+0x17c>
 8001a68:	6862      	ldr	r2, [r4, #4]
 8001a6a:	6923      	ldr	r3, [r4, #16]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	dca1      	bgt.n	80019b4 <_printf_i+0x17c>
 8001a70:	2330      	movs	r3, #48	@ 0x30
 8001a72:	f809 3c01 	strb.w	r3, [r9, #-1]
 8001a76:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8001a7a:	e79b      	b.n	80019b4 <_printf_i+0x17c>
 8001a7c:	8019      	strh	r1, [r3, #0]
 8001a7e:	e71e      	b.n	80018be <_printf_i+0x86>
 8001a80:	f9b2 1000 	ldrsh.w	r1, [r2]
 8001a84:	4608      	mov	r0, r1
 8001a86:	e768      	b.n	800195a <_printf_i+0x122>
 8001a88:	202d      	movs	r0, #45	@ 0x2d
 8001a8a:	2a00      	cmp	r2, #0
 8001a8c:	60a2      	str	r2, [r4, #8]
 8001a8e:	f884 0043 	strb.w	r0, [r4, #67]	@ 0x43
 8001a92:	db02      	blt.n	8001a9a <_printf_i+0x262>
 8001a94:	f023 0304 	bic.w	r3, r3, #4
 8001a98:	6023      	str	r3, [r4, #0]
 8001a9a:	250a      	movs	r5, #10
 8001a9c:	4805      	ldr	r0, [pc, #20]	@ (8001ab4 <_printf_i+0x27c>)
 8001a9e:	4249      	negs	r1, r1
 8001aa0:	46ae      	mov	lr, r5
 8001aa2:	e7ce      	b.n	8001a42 <_printf_i+0x20a>
 8001aa4:	7803      	ldrb	r3, [r0, #0]
 8001aa6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001aaa:	f104 0942 	add.w	r9, r4, #66	@ 0x42
 8001aae:	e77e      	b.n	80019ae <_printf_i+0x176>
 8001ab0:	6860      	ldr	r0, [r4, #4]
 8001ab2:	e742      	b.n	800193a <_printf_i+0x102>
 8001ab4:	0800201c 	.word	0x0800201c
 8001ab8:	08002030 	.word	0x08002030

08001abc <_fstat_r>:
 8001abc:	b570      	push	{r4, r5, r6, lr}
 8001abe:	460c      	mov	r4, r1
 8001ac0:	4d08      	ldr	r5, [pc, #32]	@ (8001ae4 <_fstat_r+0x28>)
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2600      	movs	r6, #0
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	4611      	mov	r1, r2
 8001aca:	461c      	mov	r4, r3
 8001acc:	602e      	str	r6, [r5, #0]
 8001ace:	f000 f9b0 	bl	8001e32 <_fstat>
 8001ad2:	1c43      	adds	r3, r0, #1
 8001ad4:	d000      	beq.n	8001ad8 <_fstat_r+0x1c>
 8001ad6:	bd70      	pop	{r4, r5, r6, pc}
 8001ad8:	682b      	ldr	r3, [r5, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0fb      	beq.n	8001ad6 <_fstat_r+0x1a>
 8001ade:	6023      	str	r3, [r4, #0]
 8001ae0:	bd70      	pop	{r4, r5, r6, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200001cc 	.word	0x200001cc

08001ae8 <_lseek_r>:
 8001ae8:	b538      	push	{r3, r4, r5, lr}
 8001aea:	460c      	mov	r4, r1
 8001aec:	4d08      	ldr	r5, [pc, #32]	@ (8001b10 <_lseek_r+0x28>)
 8001aee:	4684      	mov	ip, r0
 8001af0:	4611      	mov	r1, r2
 8001af2:	4620      	mov	r0, r4
 8001af4:	461a      	mov	r2, r3
 8001af6:	2300      	movs	r3, #0
 8001af8:	602b      	str	r3, [r5, #0]
 8001afa:	4664      	mov	r4, ip
 8001afc:	f000 f9b4 	bl	8001e68 <_lseek>
 8001b00:	1c43      	adds	r3, r0, #1
 8001b02:	d000      	beq.n	8001b06 <_lseek_r+0x1e>
 8001b04:	bd38      	pop	{r3, r4, r5, pc}
 8001b06:	682b      	ldr	r3, [r5, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0fb      	beq.n	8001b04 <_lseek_r+0x1c>
 8001b0c:	6023      	str	r3, [r4, #0]
 8001b0e:	bd38      	pop	{r3, r4, r5, pc}
 8001b10:	200001cc 	.word	0x200001cc

08001b14 <_write_r>:
 8001b14:	b538      	push	{r3, r4, r5, lr}
 8001b16:	460c      	mov	r4, r1
 8001b18:	4d08      	ldr	r5, [pc, #32]	@ (8001b3c <_write_r+0x28>)
 8001b1a:	4684      	mov	ip, r0
 8001b1c:	4611      	mov	r1, r2
 8001b1e:	4620      	mov	r0, r4
 8001b20:	461a      	mov	r2, r3
 8001b22:	2300      	movs	r3, #0
 8001b24:	602b      	str	r3, [r5, #0]
 8001b26:	4664      	mov	r4, ip
 8001b28:	f000 f95b 	bl	8001de2 <_write>
 8001b2c:	1c43      	adds	r3, r0, #1
 8001b2e:	d000      	beq.n	8001b32 <_write_r+0x1e>
 8001b30:	bd38      	pop	{r3, r4, r5, pc}
 8001b32:	682b      	ldr	r3, [r5, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0fb      	beq.n	8001b30 <_write_r+0x1c>
 8001b38:	6023      	str	r3, [r4, #0]
 8001b3a:	bd38      	pop	{r3, r4, r5, pc}
 8001b3c:	200001cc 	.word	0x200001cc

08001b40 <_malloc_usable_size_r>:
 8001b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b44:	1f18      	subs	r0, r3, #4
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	bfbc      	itt	lt
 8001b4a:	580b      	ldrlt	r3, [r1, r0]
 8001b4c:	18c0      	addlt	r0, r0, r3
 8001b4e:	4770      	bx	lr

08001b50 <main>:

uint32_t task_handlers[MAX_TASKS];

uint8_t current_task = 0;  // task 1 is running

int main(void) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0

	enable_processor_faults();
 8001b54:	f000 f848 	bl	8001be8 <enable_processor_faults>

	init_scheduler_stack(SCHEDULER_STACK_START);
 8001b58:	480d      	ldr	r0, [pc, #52]	@ (8001b90 <main+0x40>)
 8001b5a:	f000 f8a1 	bl	8001ca0 <init_scheduler_stack>

	task_handlers[0] = (uint32_t) task1_handler;
 8001b5e:	4a0d      	ldr	r2, [pc, #52]	@ (8001b94 <main+0x44>)
 8001b60:	4b0d      	ldr	r3, [pc, #52]	@ (8001b98 <main+0x48>)
 8001b62:	601a      	str	r2, [r3, #0]
	task_handlers[1] = (uint32_t) task2_handler;
 8001b64:	4a0d      	ldr	r2, [pc, #52]	@ (8001b9c <main+0x4c>)
 8001b66:	4b0c      	ldr	r3, [pc, #48]	@ (8001b98 <main+0x48>)
 8001b68:	605a      	str	r2, [r3, #4]
	task_handlers[2] = (uint32_t) task3_handler;
 8001b6a:	4a0d      	ldr	r2, [pc, #52]	@ (8001ba0 <main+0x50>)
 8001b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b98 <main+0x48>)
 8001b6e:	609a      	str	r2, [r3, #8]
	task_handlers[3] = (uint32_t) task4_handler;
 8001b70:	4a0c      	ldr	r2, [pc, #48]	@ (8001ba4 <main+0x54>)
 8001b72:	4b09      	ldr	r3, [pc, #36]	@ (8001b98 <main+0x48>)
 8001b74:	60da      	str	r2, [r3, #12]

	init_task_stacks();
 8001b76:	f000 f857 	bl	8001c28 <init_task_stacks>

	init_systick_timer(EXCEPTION_FREQUENCY);
 8001b7a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b7e:	f000 f895 	bl	8001cac <init_systick_timer>


	switch_sp_to_psp(); // we have to switch so that we can run the task in thread mode
 8001b82:	f000 f823 	bl	8001bcc <switch_sp_to_psp>

	task1_handler();
 8001b86:	f000 f8d1 	bl	8001d2c <task1_handler>


	/* Loop forever */
	for (;;) {
 8001b8a:	bf00      	nop
 8001b8c:	e7fd      	b.n	8001b8a <main+0x3a>
 8001b8e:	bf00      	nop
 8001b90:	2001fc00 	.word	0x2001fc00
 8001b94:	08001d2d 	.word	0x08001d2d
 8001b98:	200001d0 	.word	0x200001d0
 8001b9c:	08001d3d 	.word	0x08001d3d
 8001ba0:	08001d4d 	.word	0x08001d4d
 8001ba4:	08001d5d 	.word	0x08001d5d

08001ba8 <get_psp_value>:
	};
}

uint32_t get_psp_value() {
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
	return PSP_of_tasks[current_task];
 8001bac:	4b05      	ldr	r3, [pc, #20]	@ (8001bc4 <get_psp_value+0x1c>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4b05      	ldr	r3, [pc, #20]	@ (8001bc8 <get_psp_value+0x20>)
 8001bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	200001e0 	.word	0x200001e0
 8001bc8:	2000005c 	.word	0x2000005c

08001bcc <switch_sp_to_psp>:

__attribute__ ((naked)) void switch_sp_to_psp() {
	// 1. Initialize PSP to task 1 stack start - as this is the first task we want to run
	__asm volatile ("PUSH {LR}"); // save LR value for later so that we can return back to main function
 8001bcc:	b500      	push	{lr}
	// get the value of PSP of the current task
	__asm volatile ("BL get_psp_value");  // the uint32 return value is stored in r0 which we can use
 8001bce:	f7ff ffeb 	bl	8001ba8 <get_psp_value>
	__asm volatile ("MSR PSP,R0");  // Initialize PSP to point to our current task
 8001bd2:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}"); // return LR to point to main function
 8001bd6:	f85d eb04 	ldr.w	lr, [sp], #4

	// 2. change from SP to PSP using the CONTROL register
	__asm volatile ("MOV R0,#0x02");  // setting the 2nd bit in r0
 8001bda:	f04f 0002 	mov.w	r0, #2
	// this writes r0 to CONTROL register, thereby setting the 2nd bit to one and
	// changing execution from MSP to PSP
	__asm volatile ("MSR CONTROL, R0");
 8001bde:	f380 8814 	msr	CONTROL, r0

	// 3. return to main
	__asm volatile ("BX LR");
 8001be2:	4770      	bx	lr

}
 8001be4:	bf00      	nop
	...

08001be8 <enable_processor_faults>:

void enable_processor_faults() {
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR_ADDRESS = (uint32_t*) 0xE000ED24; // System Handler Control and State Register
 8001bee:	4b0d      	ldr	r3, [pc, #52]	@ (8001c24 <enable_processor_faults+0x3c>)
 8001bf0:	607b      	str	r3, [r7, #4]

	*pSHCSR_ADDRESS |= (1 << 16); // UsageFault enable bit
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	601a      	str	r2, [r3, #0]
	*pSHCSR_ADDRESS |= (1 << 17); // BusFault enable bit,
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	601a      	str	r2, [r3, #0]
	*pSHCSR_ADDRESS |= (1 << 18); // MemManage enable bit,
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	601a      	str	r2, [r3, #0]

}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	e000ed24 	.word	0xe000ed24

08001c28 <init_task_stacks>:

void init_task_stacks() {
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
	uint32_t *pPSP;

	for (int i = 0; i < MAX_TASKS; i++) {
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	e029      	b.n	8001c88 <init_task_stacks+0x60>
		pPSP = (uint32_t*) PSP_of_tasks[i]; // gets the current task's stack start
 8001c34:	4a19      	ldr	r2, [pc, #100]	@ (8001c9c <init_task_stacks+0x74>)
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3c:	60fb      	str	r3, [r7, #12]

		// XPSR
		pPSP--; // full descending stack
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	3b04      	subs	r3, #4
 8001c42:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001c4a:	601a      	str	r2, [r3, #0]

		// PC
		pPSP--;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	3b04      	subs	r3, #4
 8001c50:	60fb      	str	r3, [r7, #12]
		*pPSP = RETURN_TO_THREAD_MODE;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f06f 0202 	mvn.w	r2, #2
 8001c58:	601a      	str	r2, [r3, #0]

		// for GPIO registers r0 to r12
		for (int j = 0; j < 13; j++) {
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	607b      	str	r3, [r7, #4]
 8001c5e:	e008      	b.n	8001c72 <init_task_stacks+0x4a>
			pPSP--;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	3b04      	subs	r3, #4
 8001c64:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 13; j++) {
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b0c      	cmp	r3, #12
 8001c76:	ddf3      	ble.n	8001c60 <init_task_stacks+0x38>
		}

		// NOTE: we need to save the value back to the PSP_of_tasks
		// only then does the processor pop all the states for us
		PSP_of_tasks[i] = (uint32_t) pPSP;
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	4908      	ldr	r1, [pc, #32]	@ (8001c9c <init_task_stacks+0x74>)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < MAX_TASKS; i++) {
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	3301      	adds	r3, #1
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	ddd2      	ble.n	8001c34 <init_task_stacks+0xc>

	}

}
 8001c8e:	bf00      	nop
 8001c90:	bf00      	nop
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	2000005c 	.word	0x2000005c

08001ca0 <init_scheduler_stack>:

// naked function as MSP is a special register and it is not accessible through C code
__attribute__((naked)) void init_scheduler_stack(uint32_t top_of_stack) {
 8001ca0:	4603      	mov	r3, r0
	__asm volatile("MSR MSP,%0"::"r" (top_of_stack) :);
 8001ca2:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");
 8001ca6:	4770      	bx	lr
	// return to the caller
}
 8001ca8:	bf00      	nop
	...

08001cac <init_systick_timer>:

void init_systick_timer(uint32_t freq) {
 8001cac:	b480      	push	{r7}
 8001cae:	b087      	sub	sp, #28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
	 * - the CVRis where the counting down happens, this should not be modified
	 * - when the CVR counts down to zero, the reload value is copied again from the SVR and the count down begins again
	 * -  we should store the reload value of N-1 if we want to have an exception at N clock cycle.
	 * - ex: if we need an interrupt in 100 clock cycles then the reload value must be 99
	 * */
	uint32_t *pSystick_Reload_Value_Register = (uint32_t*) 0xE000E014;
 8001cb4:	4b15      	ldr	r3, [pc, #84]	@ (8001d0c <init_systick_timer+0x60>)
 8001cb6:	617b      	str	r3, [r7, #20]
	// systick control and status register (SCSR): 0xE000E010
	uint32_t *pSystick_Control_And_Status_Register = (uint32_t*) 0xE000E010;
 8001cb8:	4b15      	ldr	r3, [pc, #84]	@ (8001d10 <init_systick_timer+0x64>)
 8001cba:	613b      	str	r3, [r7, #16]

	uint32_t count_value = SYSTICK_TIMER_CLOCK / freq - 1;
 8001cbc:	4a15      	ldr	r2, [pc, #84]	@ (8001d14 <init_systick_timer+0x68>)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	60fb      	str	r3, [r7, #12]

	// clear the value in the SVR
	*pSystick_Reload_Value_Register &= ~(0x00FFFFFFFF); // only 0 to 24 bits are valid in this register
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]

	// load value
	*pSystick_Reload_Value_Register |= count_value;
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	601a      	str	r2, [r3, #0]

	// settings for the SCSR
	*pSystick_Control_And_Status_Register |= (1 << 1); // Enables SysTick exception request
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f043 0202 	orr.w	r2, r3, #2
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	601a      	str	r2, [r3, #0]
	*pSystick_Control_And_Status_Register |= (1 << 2); // sets the clock source to processor clock
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f043 0204 	orr.w	r2, r3, #4
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	601a      	str	r2, [r3, #0]

	// enables the systick
	*pSystick_Control_And_Status_Register |= (1 << 0);
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f043 0201 	orr.w	r2, r3, #1
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	601a      	str	r2, [r3, #0]

}
 8001cfe:	bf00      	nop
 8001d00:	371c      	adds	r7, #28
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000e014 	.word	0xe000e014
 8001d10:	e000e010 	.word	0xe000e010
 8001d14:	00f42400 	.word	0x00f42400

08001d18 <SysTick_Handler>:

void SysTick_Handler() {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
	printf("in systick handler");
 8001d1c:	4802      	ldr	r0, [pc, #8]	@ (8001d28 <SysTick_Handler+0x10>)
 8001d1e:	f7fe ff55 	bl	8000bcc <iprintf>
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	08001f5c 	.word	0x08001f5c

08001d2c <task1_handler>:

void task1_handler() {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
	while (1) {
		printf("this is task1");
 8001d30:	4801      	ldr	r0, [pc, #4]	@ (8001d38 <task1_handler+0xc>)
 8001d32:	f7fe ff4b 	bl	8000bcc <iprintf>
 8001d36:	e7fb      	b.n	8001d30 <task1_handler+0x4>
 8001d38:	08001f70 	.word	0x08001f70

08001d3c <task2_handler>:
	}
}

void task2_handler() {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
	while (1) {
		printf("this is task2");
 8001d40:	4801      	ldr	r0, [pc, #4]	@ (8001d48 <task2_handler+0xc>)
 8001d42:	f7fe ff43 	bl	8000bcc <iprintf>
 8001d46:	e7fb      	b.n	8001d40 <task2_handler+0x4>
 8001d48:	08001f80 	.word	0x08001f80

08001d4c <task3_handler>:
	}
}

void task3_handler() {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
	while (1) {
		printf("this is task3");
 8001d50:	4801      	ldr	r0, [pc, #4]	@ (8001d58 <task3_handler+0xc>)
 8001d52:	f7fe ff3b 	bl	8000bcc <iprintf>
 8001d56:	e7fb      	b.n	8001d50 <task3_handler+0x4>
 8001d58:	08001f90 	.word	0x08001f90

08001d5c <task4_handler>:
	}
}

void task4_handler() {
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
	while (1) {
		printf("this is task4");
 8001d60:	4801      	ldr	r0, [pc, #4]	@ (8001d68 <task4_handler+0xc>)
 8001d62:	f7fe ff33 	bl	8000bcc <iprintf>
 8001d66:	e7fb      	b.n	8001d60 <task4_handler+0x4>
 8001d68:	08001fa0 	.word	0x08001fa0

08001d6c <HardFault_Handler>:
	}
}

void HardFault_Handler() {
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
	printf("exception in hard fault\n");
 8001d70:	4802      	ldr	r0, [pc, #8]	@ (8001d7c <HardFault_Handler+0x10>)
 8001d72:	f7fe fac1 	bl	80002f8 <puts>
	while (1) {
 8001d76:	bf00      	nop
 8001d78:	e7fd      	b.n	8001d76 <HardFault_Handler+0xa>
 8001d7a:	bf00      	nop
 8001d7c:	08001fb0 	.word	0x08001fb0

08001d80 <MemManage_Handler>:
	};
}

void MemManage_Handler() {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
	printf("exception in MemManage_Handler\n");
 8001d84:	4802      	ldr	r0, [pc, #8]	@ (8001d90 <MemManage_Handler+0x10>)
 8001d86:	f7fe fab7 	bl	80002f8 <puts>
	while (1) {
 8001d8a:	bf00      	nop
 8001d8c:	e7fd      	b.n	8001d8a <MemManage_Handler+0xa>
 8001d8e:	bf00      	nop
 8001d90:	08001fc8 	.word	0x08001fc8

08001d94 <BusFault_Handler>:
	};
}
void BusFault_Handler() {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
	printf("exception in BusFault_Handlern");
 8001d98:	4802      	ldr	r0, [pc, #8]	@ (8001da4 <BusFault_Handler+0x10>)
 8001d9a:	f7fe ff17 	bl	8000bcc <iprintf>
	while (1) {
 8001d9e:	bf00      	nop
 8001da0:	e7fd      	b.n	8001d9e <BusFault_Handler+0xa>
 8001da2:	bf00      	nop
 8001da4:	08001fe8 	.word	0x08001fe8

08001da8 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	e00a      	b.n	8001dd0 <_read+0x28>
		*ptr++ = __io_getchar();
 8001dba:	f3af 8000 	nop.w
 8001dbe:	4601      	mov	r1, r0
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	1c5a      	adds	r2, r3, #1
 8001dc4:	60ba      	str	r2, [r7, #8]
 8001dc6:	b2ca      	uxtb	r2, r1
 8001dc8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	dbf0      	blt.n	8001dba <_read+0x12>
	}

	return len;
 8001dd8:	687b      	ldr	r3, [r7, #4]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b086      	sub	sp, #24
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	60f8      	str	r0, [r7, #12]
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	e009      	b.n	8001e08 <_write+0x26>
		__io_putchar(*ptr++);
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	1c5a      	adds	r2, r3, #1
 8001df8:	60ba      	str	r2, [r7, #8]
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	3301      	adds	r3, #1
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	dbf1      	blt.n	8001df4 <_write+0x12>
	}
	return len;
 8001e10:	687b      	ldr	r3, [r7, #4]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <_close>:

int _close(int file) {
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8001e22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <_fstat>:

int _fstat(int file, struct stat *st) {
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e42:	605a      	str	r2, [r3, #4]
	return 0;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <_isatty>:

int _isatty(int file) {
 8001e52:	b480      	push	{r7}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8001e5a:	2301      	movs	r3, #1
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
	...

08001e84 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8001e8c:	4a14      	ldr	r2, [pc, #80]	@ (8001ee0 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8001e8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ee4 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8001e98:	4b13      	ldr	r3, [pc, #76]	@ (8001ee8 <_sbrk+0x64>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d102      	bne.n	8001ea6 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8001ea0:	4b11      	ldr	r3, [pc, #68]	@ (8001ee8 <_sbrk+0x64>)
 8001ea2:	4a12      	ldr	r2, [pc, #72]	@ (8001eec <_sbrk+0x68>)
 8001ea4:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8001ea6:	4b10      	ldr	r3, [pc, #64]	@ (8001ee8 <_sbrk+0x64>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4413      	add	r3, r2
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d207      	bcs.n	8001ec4 <_sbrk+0x40>
		errno = ENOMEM;
 8001eb4:	f7fe fc60 	bl	8000778 <__errno>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	220c      	movs	r2, #12
 8001ebc:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8001ebe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ec2:	e009      	b.n	8001ed8 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8001ec4:	4b08      	ldr	r3, [pc, #32]	@ (8001ee8 <_sbrk+0x64>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8001eca:	4b07      	ldr	r3, [pc, #28]	@ (8001ee8 <_sbrk+0x64>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	4a05      	ldr	r2, [pc, #20]	@ (8001ee8 <_sbrk+0x64>)
 8001ed4:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20020000 	.word	0x20020000
 8001ee4:	00000400 	.word	0x00000400
 8001ee8:	200001e4 	.word	0x200001e4
 8001eec:	200001e8 	.word	0x200001e8

08001ef0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ef0:	480d      	ldr	r0, [pc, #52]	@ (8001f28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ef2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ef4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ef8:	480c      	ldr	r0, [pc, #48]	@ (8001f2c <LoopForever+0x6>)
  ldr r1, =_edata
 8001efa:	490d      	ldr	r1, [pc, #52]	@ (8001f30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001efc:	4a0d      	ldr	r2, [pc, #52]	@ (8001f34 <LoopForever+0xe>)
  movs r3, #0
 8001efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f00:	e002      	b.n	8001f08 <LoopCopyDataInit>

08001f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f06:	3304      	adds	r3, #4

08001f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f0c:	d3f9      	bcc.n	8001f02 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f10:	4c0a      	ldr	r4, [pc, #40]	@ (8001f3c <LoopForever+0x16>)
  movs r3, #0
 8001f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f14:	e001      	b.n	8001f1a <LoopFillZerobss>

08001f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f18:	3204      	adds	r2, #4

08001f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f1c:	d3fb      	bcc.n	8001f16 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f1e:	f7fe f97b 	bl	8000218 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f22:	f7ff fe15 	bl	8001b50 <main>

08001f26 <LoopForever>:

LoopForever:
  b LoopForever
 8001f26:	e7fe      	b.n	8001f26 <LoopForever>
  ldr   r0, =_estack
 8001f28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f30:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001f34:	08002054 	.word	0x08002054
  ldr r2, =_sbss
 8001f38:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001f3c:	200001e8 	.word	0x200001e8

08001f40 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f40:	e7fe      	b.n	8001f40 <ADC_IRQHandler>
	...

08001f44 <_init>:
 8001f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f46:	bf00      	nop
 8001f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f4a:	bc08      	pop	{r3}
 8001f4c:	469e      	mov	lr, r3
 8001f4e:	4770      	bx	lr

08001f50 <_fini>:
 8001f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f52:	bf00      	nop
 8001f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f56:	bc08      	pop	{r3}
 8001f58:	469e      	mov	lr, r3
 8001f5a:	4770      	bx	lr
